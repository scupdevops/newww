{"results":[{"name":"form-serialize","description":"serialize html forms","readme":"# form-serialize [![Build Status](https://travis-ci.org/defunctzombie/form-serialize.png?branch=master)](https://travis-ci.org/defunctzombie/form-serialize)\n\nserialize form fields to submit a form over ajax\n\n## install\n\n```shell\nnpm install form-serialize\n```\n\n## use\n\nform-serialize supports two output formats, url encoded (default) or hash (js objects).\n\nLets serialize the following html form:\n```html\n<form id=\"example-form\">\n\t<input type=\"text\" name=\"foo\" value=\"bar\"/>\n\t<input type=\"submit\" value=\"do it!\"/>\n</form>\n```\n\n```js\nvar serialize = require('form-serialize');\nvar form = document.querySelector('#example-form');\n\nvar str = serialize(form);\n// str -> \"foo=bar\"\n\nvar obj = serialize(form, { hash: true });\n// obj -> { foo: 'bar' }\n```\n\n## api\n\n### serialize(form [, options])\n\nReturns a serialized form of a HTMLForm element. Output is determined by the serializer used. Default serializer is url-encoded.\n\narg | type | desc\n:--- | :--- | :---\nform | HTMLForm | must be an HTMLForm element\noptions | Object | optional options object\n\n#### options\n\noption | type | default | desc\n:--- | :--- | :---: | :---\nhash | boolean | false | if `true`, the hash serializer will be used for `serializer` option\nserializer | function | url-encoding | override the default serializer (hash or url-encoding)\ndisabled | boolean | false | if `true`, disabled fields will also be serialized\nempty | boolean | false | if `true`, empty fields will also be serialized\n\n### custom serializer\n\nSerializers take 3 arguments: `result`, `key`, `value` and should return a newly updated result.\n\nSee the example serializers in the index.js source file.\n\n## notes\n\nonly [successfull control](http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2) form fields are serialized (with the exception of disabled fields if disabled option is set)\n\nmultiselect fields with more than one value will result in an array of values in the `hash` output mode using the default hash serializer\n\n### explicit array fields\n\nFields who's name ends with `[]` are **always** serialized as an array field in `hash` output mode using the default hash serializer.\nThe field name also gets the brackets removed from its name.\n\nThis does not affect `url-encoding` mode output in any way.\n\n```html\n<form id=\"example-form\">\n\t<input type=\"checkbox\" name=\"foo[]\" value=\"bar\" checked />\n\t<input type=\"checkbox\" name=\"foo[]\" value=\"baz\" />\n\t<input type=\"submit\" value=\"do it!\"/>\n</form>\n```\n\n```js\nvar serialize = require('form-serialize');\nvar form = document.querySelector('#example-form');\n\nvar obj = serialize(form, { hash: true });\n// obj -> { foo: ['bar'] }\n\nvar str = serialize(form);\n// str -> \"foo[]=bar\"\n\n```\n\n## references\n\nThis module is based on ideas from jQuery serialize and the Form.serialize method from the prototype library\n\n## license\n\nMIT\n","version":"0.6.0","publisher":{"name":"shtylman","email":"shtylman@gmail.com","url":null},"lastPublishedAt":"2015-03-04T07:30:42.733Z"},{"name":"express","description":"Fast, unopinionated, minimalist web framework","readme":"[![Express Logo](https://i.cloudup.com/zfY6lL7eFa-3000x3000.png)](http://expressjs.com/)\n\n  Fast, unopinionated, minimalist web framework for [node](http://nodejs.org).\n\n  [![NPM Version][npm-image]][npm-url]\n  [![NPM Downloads][downloads-image]][downloads-url]\n  [![Linux Build][travis-image]][travis-url]\n  [![Windows Build][appveyor-image]][appveyor-url]\n  [![Test Coverage][coveralls-image]][coveralls-url]\n\n```js\nvar express = require('express')\nvar app = express()\n\napp.get('/', function (req, res) {\n  res.send('Hello World')\n})\n\napp.listen(3000)\n```\n\n## Installation\n\n```bash\n$ npm install express\n```\n\n## Features\n\n  * Robust routing\n  * Focus on high performance\n  * Super-high test coverage\n  * HTTP helpers (redirection, caching, etc)\n  * View system supporting 14+ template engines\n  * Content negotiation\n  * Executable for generating applications quickly\n\n## Docs & Community\n\n  * [Website and Documentation](http://expressjs.com/) - [[website repo](https://github.com/strongloop/expressjs.com)]\n  * [#express](https://webchat.freenode.net/?channels=express) on freenode IRC\n  * [Github Organization](https://github.com/expressjs) for Official Middleware & Modules\n  * Visit the [Wiki](https://github.com/strongloop/express/wiki)\n  * [Google Group](https://groups.google.com/group/express-js) for discussion\n  * [Русскоязычная документация](http://jsman.ru/express/)\n  * [한국어 문서](http://expressjs.kr) - [[website repo](https://github.com/Hanul/expressjs.kr)]\n\n**PROTIP** Be sure to read [Migrating from 3.x to 4.x](https://github.com/strongloop/express/wiki/Migrating-from-3.x-to-4.x) as well as [New features in 4.x](https://github.com/strongloop/express/wiki/New-features-in-4.x).\n\n## Quick Start\n\n  The quickest way to get started with express is to utilize the executable [`express(1)`](https://github.com/expressjs/generator) to generate an application as shown below:\n\n  Install the executable. The executable's major version will match Express's:\n\n```bash\n$ npm install -g express-generator@4\n```\n\n  Create the app:\n\n```bash\n$ express /tmp/foo && cd /tmp/foo\n```\n\n  Install dependencies:\n\n```bash\n$ npm install\n```\n\n  Start the server:\n\n```bash\n$ npm start\n```\n\n## Philosophy\n\n  The Express philosophy is to provide small, robust tooling for HTTP servers, making\n  it a great solution for single page applications, web sites, hybrids, or public\n  HTTP APIs.\n\n  Express does not force you to use any specific ORM or template engine. With support for over\n  14 template engines via [Consolidate.js](https://github.com/tj/consolidate.js),\n  you can quickly craft your perfect framework.\n\n## Examples\n\n  To view the examples, clone the Express repo and install the dependancies:\n\n```bash\n$ git clone git://github.com/strongloop/express.git --depth 1\n$ cd express\n$ npm install\n```\n\n  Then run whichever example you want:\n\n```bash\n$ node examples/content-negotiation\n```\n\n## Tests\n\n  To run the test suite, first install the dependancies, then run `npm test`:\n\n```bash\n$ npm install\n$ npm test\n```\n\n## People\n\nThe original author of Express is [TJ Holowaychuk](https://github.com/tj) [![TJ's Gratipay][gratipay-image-visionmedia]][gratipay-url-visionmedia]\n\nThe current lead maintainer is [Douglas Christopher Wilson](https://github.com/dougwilson) [![Doug's Gratipay][gratipay-image-dougwilson]][gratipay-url-dougwilson]\n\n[List of all contributors](https://github.com/strongloop/express/graphs/contributors)\n\n## License\n\n  [MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/express.svg\n[npm-url]: https://npmjs.org/package/express\n[downloads-image]: https://img.shields.io/npm/dm/express.svg\n[downloads-url]: https://npmjs.org/package/express\n[travis-image]: https://img.shields.io/travis/strongloop/express/master.svg?label=linux\n[travis-url]: https://travis-ci.org/strongloop/express\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/express/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/express\n[coveralls-image]: https://img.shields.io/coveralls/strongloop/express/master.svg\n[coveralls-url]: https://coveralls.io/r/strongloop/express?branch=master\n[gratipay-image-visionmedia]: https://img.shields.io/gratipay/visionmedia.svg\n[gratipay-url-visionmedia]: https://gratipay.com/visionmedia/\n[gratipay-image-dougwilson]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url-dougwilson]: https://gratipay.com/dougwilson/\n","version":"4.12.2","publisher":{"name":"dougwilson","email":"doug@somethingdoug.com","url":null},"lastPublishedAt":"2015-03-03T05:46:46.092Z"},{"name":"validator","description":"String validation and sanitization","readme":"# validator.js\n\n[![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Downloads][downloads-image]][npm-url]\n\nA library of string validators and sanitizers.\n\n### Server-side usage\n\nInstall the library with `npm install validator`\n\n```javascript\nvar validator = require('validator');\n\nvalidator.isEmail('foo@bar.com'); //=> true\n```\n\n### Client-side usage\n\nThe library can be loaded either as a standalone script, or through an [AMD][amd]-compatible loader\n\n```html\n<script type=\"text/javascript\" src=\"validator.min.js\"></script>\n<script type=\"text/javascript\">\n  validator.isEmail('foo@bar.com'); //=> true\n</script>\n```\n\nThe library can also be installed through [bower][bower]\n\n```bash\n$ bower install validator-js\n```\n\n### Validators\n\n- **equals(str, comparison)** - check if the string matches the comparison.\n- **contains(str, seed)** - check if the string contains the seed.\n- **matches(str, pattern [, modifiers])** - check if string matches the pattern. Either `matches('foo', /foo/i)` or `matches('foo', 'foo', 'i')`.\n- **isEmail(str [, options])** - check if the string is an email. `options` is an object which defaults to `{ allow_display_name: false }`. If `allow_display_name` is set to true, the validator will also match `Display Name <email-address>`.\n- **isURL(str [, options])** - check if the string is an URL. `options` is an object which defaults to `{ protocols: ['http','https','ftp'], require_tld: true, require_protocol: false, allow_underscores: false, host_whitelist: false, host_blacklist: false, allow_trailing_dot: false, allow_protocol_relative_urls: false }`.\n- **isFQDN(str [, options])** - check if the string is a fully qualified domain name (e.g. domain.com). `options` is an object which defaults to `{ require_tld: true, allow_underscores: false, allow_trailing_dot: false }`.\n- **isIP(str [, version])** - check if the string is an IP (version 4 or 6).\n- **isAlpha(str)** - check if the string contains only letters (a-zA-Z).\n- **isNumeric(str)** - check if the string contains only numbers.\n- **isAlphanumeric(str)** - check if the string contains only letters and numbers.\n- **isBase64(str)** - check if a string is base64 encoded.\n- **isHexadecimal(str)** - check if the string is a hexadecimal number.\n- **isHexColor(str)** - check if the string is a hexadecimal color.\n- **isLowercase(str)** - check if the string is lowercase.\n- **isUppercase(str)** - check if the string is uppercase.\n- **isInt(str)** - check if the string is an integer.\n- **isFloat(str)** - check if the string is a float.\n- **isDivisibleBy(str, number)** - check if the string is a number that's divisible by another.\n- **isNull(str)** - check if the string is null.\n- **isLength(str, min [, max])** - check if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n- **isByteLength(str, min [, max])** - check if the string's length (in bytes) falls in a range.\n- **isUUID(str [, version])** - check if the string is a UUID (version 3, 4 or 5).\n- **isDate(str)** - check if the string is a date.\n- **isAfter(str [, date])** - check if the string is a date that's after the specified date (defaults to now).\n- **isBefore(str [, date])** - check if the string is a date that's before the specified date.\n- **isIn(str, values)** - check if the string is in a array of allowed values.\n- **isCreditCard(str)** - check if the string is a credit card.\n- **isISBN(str [, version])** - check if the string is an ISBN (version 10 or 13).\n- **isMobilePhone(str, locale)** - check if the string is a mobile phone number, (locale is one of `['zh-CN', 'en-ZA', 'en-AU', 'en-HK', 'pt-PT', 'fr-FR', 'el-GR']`).\n- **isJSON(str)** - check if the string is valid JSON (note: uses JSON.parse).\n- **isMultibyte(str)** - check if the string contains one or more multibyte chars.\n- **isAscii(str)** - check if the string contains ASCII chars only.\n- **isFullWidth(str)** - check if the string contains any full-width chars.\n- **isHalfWidth(str)** - check if the string contains any half-width chars.\n- **isVariableWidth(str)** - check if the string contains a mixture of full and half-width chars.\n- **isSurrogatePair(str)** - check if the string contains any surrogate pairs chars.\n- **isMongoId(str)** - check if the string is a valid hex-encoded representation of a [MongoDB ObjectId][mongoid].\n- **isCurrency(str, options)** - check if the string is a valid currency amount. `options` is an object which defaults to `{symbol: '$', require_symbol: false, allow_space_after_symbol: false, symbol_after_digits: false, allow_negatives: true, parens_for_negatives: false, negative_sign_before_digits: false, negative_sign_after_digits: false, allow_negative_sign_placeholder: false, thousands_separator: ',', decimal_separator: '.', allow_space_after_digits: false }`.\n\n### Sanitizers\n\n- **toString(input)** - convert the input to a string.\n- **toDate(input)** - convert the input to a date, or `null` if the input is not a date.\n- **toFloat(input)** - convert the input to a float, or `NaN` if the input is not a float.\n- **toInt(input [, radix])** - convert the input to an integer, or `NaN` if the input is not an integer.\n- **toBoolean(input [, strict])** - convert the input to a boolean. Everything except for `'0'`, `'false'` and `''` returns `true`. In strict mode only `'1'` and `'true'` return `true`.\n- **trim(input [, chars])** - trim characters (whitespace by default) from both sides of the input.\n- **ltrim(input [, chars])** - trim characters from the left-side of the input.\n- **rtrim(input [, chars])** - trim characters from the right-side of the input.\n- **escape(input)** - replace `<`, `>`, `&`, `'`, `\"` and `/` with HTML entities. \n- **stripLow(input [, keep_new_lines])** - remove characters with a numerical value < 32 and 127, mostly control characters. If `keep_new_lines` is `true`, newline characters are preserved (`\\n` and `\\r`, hex `0xA` and `0xD`). Unicode-safe in JavaScript.\n- **whitelist(input, chars)** - remove characters that do not appear in the whitelist. The characters are used in a RegExp and so you will need to escape some chars, e.g. whitelist(input, '\\\\[\\\\]').\n- **blacklist(input, chars)** - remove characters that appear in the blacklist. The characters are used in a RegExp and so you will need to escape some chars, e.g. blacklist(input, '\\\\[\\\\]').\n- **normalizeEmail(email [, options])** - canonicalize an email address. `options` is an object which defaults to `{ lowercase: true }`. With `lowercase` set to `true`, the local part of the email address is lowercased for all domains; the hostname is always lowercased and the local part of the email address is always lowercased for hosts that are known to be case-insensitive (currently only GMail). Normalization follows special rules for known providers: currently, GMail addresses have dots removed in the local part and are stripped of tags (e.g. `some.one+tag@gmail.com` becomes `someone@gmail.com`) and all `@googlemail.com` addresses are normalized to `@gmail.com`.\n\n### Strings only\n\nThis library validates and sanitizes **strings** only. All input will be coerced to a string using the following rules\n\n- Call the `toString` property if available.\n- Replace `null`, `undefined` or `NaN` with an empty string.\n- Everything else is coerced with `input + ''`.\n\n### Extensions\n\nYou can add your own validators using `validator.extend(name, fn)`\n\n```javascript\nvalidator.extend('isFinite', function (str) {\n    return isFinite(str);\n});\n```\n\nNote that the first argument will be automatically coerced to a string.\n\n```javascript\nvalidator.isFinite(12345); // => true\nvalidator.isFinite('foo'); // => false\n```\n\n### Deprecations\n\nVersion 3 of the library deprecated some functionality\n\n- **XSS sanitizer**: Here's [why][remove-xss]. Use [Google Caja][caja] instead.\n- **Entity encoding**: Use [fb55/entities][entities] or [substack/node-ent][node-ent].\n- **Validator chaining**: The API was too unintuitive. I'd prefer to let users create their own higher-level patterns from the provided building blocks.\n\nIf you're migrating from version `1.x` or `2.x`, check out the [migration guide](https://github.com/chriso/validator.js/wiki/Migrating-from-1.x-and-2.x).\n\n### Tests\n\n- `make test` - run the test suite.\n- `make test V=1` - run the test suite with added verbosity.\n- `make test TEST=pattern` - run tests that match a pattern.\n- `make coverage` - run a coverage analysis tool.\n- `make lint` - run a lint tool.\n\n### License (MIT)\n\n```\nCopyright (c) 2015 Chris O'Hara <cohara87@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n[downloads-image]: http://img.shields.io/npm/dm/validator.svg\n\n[npm-url]: https://npmjs.org/package/validator\n[npm-image]: http://img.shields.io/npm/v/validator.svg\n\n[travis-url]: https://travis-ci.org/chriso/validator.js\n[travis-image]: http://img.shields.io/travis/chriso/validator.js.svg\n\n[coveralls-url]: https://coveralls.io/r/chriso/validator.js\n[coveralls-image]: http://img.shields.io/coveralls/chriso/validator.js/master.svg\n\n[amd]: http://requirejs.org/docs/whyamd.html\n[bower]: http://bower.io/\n\n[mongoid]: http://docs.mongodb.org/manual/reference/object-id/\n\n[remove-xss]: https://github.com/chriso/validator.js/commit/2d5d6999541add350fb396ef02dc42ca3215049e\n[caja]: https://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/plugin/html-sanitizer.js\n[entities]: https://github.com/fb55/node-entities\n[node-ent]: https://github.com/substack/node-ent\n","version":"3.33.0","publisher":{"name":"cohara87","email":"cohara87@gmail.com","url":null},"lastPublishedAt":"2015-03-03T03:01:32.817Z"},{"name":"commander","description":"the complete solution for node.js command-line programs","readme":"# Commander.js\n\n [![Build Status](https://api.travis-ci.org/tj/commander.js.svg)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n\n  The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/tj/commander).  \n  [API documentation](http://tj.github.com/commander.js/)\n\n\n## Installation\n\n    $ npm install commander\n\n## Option parsing\n\n Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.0.1')\n  .option('-p, --peppers', 'Add peppers')\n  .option('-P, --pineapple', 'Add pineapple')\n  .option('-b, --bbq', 'Add bbq sauce')\n  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')\n  .parse(process.argv);\n\nconsole.log('you ordered a pizza with:');\nif (program.peppers) console.log('  - peppers');\nif (program.pineapple) console.log('  - pineapple');\nif (program.bbq) console.log('  - bbq');\nconsole.log('  - %s cheese', program.cheese);\n```\n\n Short flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc.\n\n\n## Coercion\n\n```js\nfunction range(val) {\n  return val.split('..').map(Number);\n}\n\nfunction list(val) {\n  return val.split(',');\n}\n\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\n\nfunction increaseVerbosity(v, total) {\n  return total + 1;\n}\n\nprogram\n  .version('0.0.1')\n  .usage('[options] <file ...>')\n  .option('-i, --integer <n>', 'An integer argument', parseInt)\n  .option('-f, --float <n>', 'A float argument', parseFloat)\n  .option('-r, --range <a>..<b>', 'A range', range)\n  .option('-l, --list <items>', 'A list', list)\n  .option('-o, --optional [value]', 'An optional value')\n  .option('-c, --collect [value]', 'A repeatable value', collect, [])\n  .option('-v, --verbose', 'A value that can be increased', increaseVerbosity, 0)\n  .parse(process.argv);\n\nconsole.log(' int: %j', program.integer);\nconsole.log(' float: %j', program.float);\nconsole.log(' optional: %j', program.optional);\nprogram.range = program.range || [];\nconsole.log(' range: %j..%j', program.range[0], program.range[1]);\nconsole.log(' list: %j', program.list);\nconsole.log(' collect: %j', program.collect);\nconsole.log(' verbosity: %j', program.verbose);\nconsole.log(' args: %j', program.args);\n```\n\n## Variadic arguments\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you have to\n append `...` to the argument name.  Here is an example:\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.0.1')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\n An `Array` is used for the value of a variadic argument.  This applies to `program.args` as well as the argument passed\n to your action as demonstrated above.\n\n## Git-style sub-commands\n\n```js\n// file: ./examples/pm\nvar program = require('..');\n\nprogram\n  .version('0.0.1')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('list', 'list packages installed')\n  .parse(process.argv);\n```\n\nWhen `.command()` is invoked with a description argument, no `.action(callback)` should be called to handle sub-commands, otherwise there will be an error. This tells commander that you're going to use separate executables for sub-commands, much like `git(1)` and other popular tools.  \nThe commander will try to find the executable script in __current directory__ with the name `scriptBasename-subcommand`, like `pm-install`, `pm-search`.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```  \n $ ./examples/pizza --help\n\n   Usage: pizza [options]\n\n   An application for pizzas ordering\n\n   Options:\n\n     -h, --help           output usage information\n     -V, --version        output the version number\n     -p, --peppers        Add peppers\n     -P, --pineapple      Add pineapple\n     -b, --bbq            Add bbq sauce\n     -c, --cheese <type>  Add the specified type of cheese [marble]\n     -C, --no-cheese      You do not want any cheese\n\n```\n\n## Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for \"--help\". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviours, for example\n in the following executable \"stuff\" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.0.1')\n  .option('-f, --foo', 'enable some foo')\n  .option('-b, --bar', 'enable some bar')\n  .option('-B, --baz', 'enable some baz');\n\n// must be before .parse() since\n// node's emit() is immediate\n\nprogram.on('--help', function(){\n  console.log('  Examples:');\n  console.log('');\n  console.log('    $ custom-help --help');\n  console.log('    $ custom-help -h');\n  console.log('');\n});\n\nprogram.parse(process.argv);\n\nconsole.log('stuff');\n```\n\nYields the following help output when `node script-name.js -h` or `node script-name.js --help` are run:\n\n```\n\nUsage: custom-help [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n\n  $ custom-help --help\n  $ custom-help -h\n\n```\n\n## .outputHelp()\n\n  Output help information without exiting.\n\n## .help()\n\n  Output help information and exit immediately.\n\n## Examples\n\n```js\nvar program = require('commander');\n\nprogram\n  .version('0.0.1')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook')\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    var mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('  Examples:');\n    console.log();\n    console.log('    $ deploy exec sequential');\n    console.log('    $ deploy exec async');\n    console.log();\n  });\n\nprogram\n  .command('*')\n  .action(function(env){\n    console.log('deploying \"%s\"', env);\n  });\n\nprogram.parse(process.argv);\n```\n\nYou can see more Demos in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","version":"2.6.0","publisher":{"name":"zhiyelee","email":"zhiyelee@gmail.com","url":null},"lastPublishedAt":"2015-03-03T03:01:31.009Z"},{"name":"gulp-sass","description":"Gulp plugin for sass","readme":"[![Build Status](https://travis-ci.org/dlmanning/gulp-sass.svg?branch=master)](https://travis-ci.org/dlmanning/gulp-sass)\n\ngulp-sass\n=========\n\nSass plugin for [gulp](https://github.com/gulpjs/gulp).\n\n#Install\n\n```\nnpm install gulp-sass\n```\n\n#Basic Usage\n\nSomething like this:\n\n```javascript\nvar gulp = require('gulp');\nvar sass = require('gulp-sass');\n\ngulp.task('sass', function () {\n\tgulp.src('./scss/*.scss')\n\t\t.pipe(sass())\n\t\t.pipe(gulp.dest('./css'));\n});\n```\n\nOptions passed as a hash into `sass()` will be passed along to [`node-sass`](https://github.com/sass/node-sass).\n\nIf you want to use the indented syntax (`.sass`) as the top level file, use `sass({indentedSyntax: true})`.\n\n## gulp-sass specific options\n\n#### `errLogToConsole: true`\n\nIf you pass `errLogToConsole: true` into the options hash, sass errors will be logged to the console instead of generating a `gutil.PluginError` object. Use this option with `gulp.watch` to keep gulp from stopping every time you mess up your sass.\n\n#### `onSuccess: callback`\n\nPass in your own callback to be called upon successful compilation by node-sass. The callback has the form `callback(css)`, and is passed the compiled css as a string. Note: This *does not* prevent gulp-sass's default behavior of writing the output css file.\n\n#### `onError: callback`\n\nPass in your own callback to be called upon a sass error from node-sass. The callback has the form `callback(err)`, where err is the error string generated by libsass. Note: this *does* prevent an actual `gulpPluginError` object from being created.\n\n#### `sync: true`\n\nIf you pass `sync: true` into the options hash, sass.renderSync will be called, instead of sass.render. This should help when memory and/or cpu usage is getting very high when rendering many and/or big files.\n\n## Source Maps\n\ngulp-sass can be used in tandem with [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps) to generate source maps for the SASS to CSS compilation. You will need to initialize [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps) prior to running the gulp-sass compiler and write the source maps after.\n\n```javascript\nvar sourcemaps = require('gulp-sourcemaps');\n\ngulp.src('./scss/*.scss')\n  .pipe(sourcemaps.init())\n    .pipe(sass())\n  .pipe(sourcemaps.write())\n  .pipe(gulp.dest('./css');\n\n// will write the source maps inline in the compiled CSS files\n```\n\nBy default, [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps) writes the source maps inline in the compiled CSS files. To write them to a separate file, specify a relative file path in the `sourcemaps.write()` function.\n\n```javascript\nvar sourcemaps = require('gulp-sourcemaps');\n\ngulp.src('./scss/*.scss')\n  .pipe(sourcemaps.init())\n    .pipe(sass())\n  .pipe(sourcemaps.write('./maps'))\n  .pipe(gulp.dest('./css'));\n\n// will write the source maps to ./dest/css/maps\n```\n\n#Imports and Partials\n\ngulp-sass now automatically passes along the directory of every scss file it parses as an include path for node-sass. This means that as long as you specify your includes relative to path of your scss file, everything will just work.\n\nscss/includes/_settings.scss:\n\n```scss\n$blue: #3bbfce;\n$margin: 16px;\n```\n\nscss/style.scss:\n\n```scss\n@import \"includes/settings\";\n\n.content-navigation {\n  border-color: $blue;\n  color:\n    darken($blue, 9%);\n}\n\n.border {\n  padding: $margin / 2;\n  margin: $margin / 2;\n  border-color: $blue;\n}\n```\n\n#Issues\n\nBefore submitting an issue, please understand that gulp-sass is only a wrapper for [node-sass](https://github.com/sass/node-sass), which in turn is a node front end for [libsass](https://github.com/sass/libsass). Missing sass features and errors should not be reported here.\n","version":"1.3.3","publisher":{"name":"dlmanning","email":"dlmanning@me.com","url":null},"lastPublishedAt":"2015-03-03T03:01:29.668Z"},{"name":"yo","description":"CLI tool for running Yeoman generators","readme":"▂▂╱▔▔▔▔▔▔▔▔▔▔╲  \n╲▂┈╭╮╱╱╭┳━━━╮▕  \n┈┈▏┃╰╮╭╯┃╭━╮┃▕  \n┈┈▏╰╮╰╯╭┫┃╱┃┃▕  \n┈┈▏╱╰╮╭╯┃┃╱┃┃▕  \n┈┈▏╱╱┃┃╱┃╰━╯┃▕  \n┈┈▏╱╱╰╯╱╰━━━╯▕  \n┈┈╲▂▂▂▂▂▂▂▂▂▂╱\n\n\n[![Build Status](https://travis-ci.org/yeoman/yo.svg?branch=master)](https://travis-ci.org/yeoman/yo) ![](http://img.shields.io/badge/unicorn-approved-ff69b4.svg)\n\n> CLI tool for running Yeoman [generators](http://yeoman.io/generators/)\n\n<img src=\"screenshot.png\" width=\"569\">\n\n\n## [Documentation](https://github.com/yeoman/yeoman/wiki)\n\n\n## Options\n\n- `--no-color` flag to disable colors.\n- `--version` Print the current `yo` version.\n- `--help` Print `yo` help menu with the list of found generators\n- `--[no-]insight` to toggle anonymous [Insight](https://github.com/yeoman/insight) tracking which helps us improve Yeoman. Using either of these flags on the first run will prevent you from being prompted about it interactively. The flags can also be used to change it later on.\n- `--generators` will output the available generators\n\n\n## Troubleshooting\n\nRunning `yo doctor` command can help you troubleshoot common issues.\n\nIf `doctor` doesn't help, then check opened issues for a similar problem. Open a new issue if your problem haven't been reported yet. Make sure to always include the version of `yo` (`yo --version`) and Node.js (`node --version`) you use.\n\nIf your issue only occur using a generator, please report the issues on the generator's repository.\n\n\n## Contribute\n\nSee the [contributing docs](https://github.com/yeoman/yeoman/blob/master/contributing.md).\n\n\n## Changelog\n\nSee the [release page](https://github.com/yeoman/yo/releases).\n\n\n## License\n\n[BSD license](http://opensource.org/licenses/bsd-license.php) and copyright Google.\n","version":"1.4.6","publisher":{"name":"sindresorhus","email":"sindresorhus@gmail.com","url":null},"lastPublishedAt":"2015-03-04T11:19:31.318Z"},{"name":"gulp","description":"The streaming build system","readme":"<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# gulp\n**The streaming build system**\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Support us][gittip-image]][gittip-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\n## Like what we do?\n\n[Support us via Gratipay](https://gratipay.com/WeAreFractal/)\n\n## Documentation\n\nFor a Getting started guide, API docs, recipes, making a plugin, etc. see the [documentation page](/docs/README.md)!\n\n## Sample `gulpfile.js`\n\nThis file is just a quick sample to give you a taste of what gulp does.\n\n```js\nvar gulp = require('gulp');\nvar coffee = require('gulp-coffee');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar imagemin = require('gulp-imagemin');\nvar sourcemaps = require('gulp-sourcemaps');\nvar del = require('del');\n\nvar paths = {\n  scripts: ['client/js/**/*.coffee', '!client/external/**/*.coffee'],\n  images: 'client/img/**/*'\n};\n\n// Not all tasks need to use streams\n// A gulpfile is just another node program and you can use all packages available on npm\ngulp.task('clean', function(cb) {\n  // You can use multiple globbing patterns as you would with `gulp.src`\n  del(['build'], cb);\n});\n\ngulp.task('scripts', ['clean'], function() {\n  // Minify and copy all JavaScript (except vendor scripts)\n  // with sourcemaps all the way down\n  return gulp.src(paths.scripts)\n    .pipe(sourcemaps.init())\n      .pipe(coffee())\n      .pipe(uglify())\n      .pipe(concat('all.min.js'))\n    .pipe(sourcemaps.write())\n    .pipe(gulp.dest('build/js'));\n});\n\n// Copy all static images\ngulp.task('images', ['clean'], function() {\n  return gulp.src(paths.images)\n    // Pass in options to the task\n    .pipe(imagemin({optimizationLevel: 5}))\n    .pipe(gulp.dest('build/img'));\n});\n\n// Rerun the task when a file changes\ngulp.task('watch', function() {\n  gulp.watch(paths.scripts, ['scripts']);\n  gulp.watch(paths.images, ['images']);\n});\n\n// The default task (called when you run `gulp` from cli)\ngulp.task('default', ['watch', 'scripts', 'images']);\n```\n\n## Incremental Builds\n\nWe recommend these plugins:\n\n- [gulp-changed](https://github.com/sindresorhus/gulp-changed) - only pass through changed files\n- [gulp-cached](https://github.com/wearefractal/gulp-cached) - in-memory file cache, not for operation on sets of files\n- [gulp-remember](https://github.com/ahaurw01/gulp-remember) - pairs nicely with gulp-cached\n- [gulp-newer](https://github.com/tschaub/gulp-newer) - pass through newer source files only, supports many:1 source:dest\n\n## Want to contribute?\n\nAnyone can help make this project better - check out the [Contributing guide](/CONTRIBUTING.md)!\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/wearefractal/gulp/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n[gittip-url]: https://www.gittip.com/WeAreFractal/\n[gittip-image]: http://img.shields.io/gittip/WeAreFractal.svg\n\n[downloads-image]: http://img.shields.io/npm/dm/gulp.svg\n[npm-url]: https://npmjs.org/package/gulp\n[npm-image]: http://img.shields.io/npm/v/gulp.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/gulp\n[travis-image]: http://img.shields.io/travis/gulpjs/gulp.svg\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/gulp\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/gulp/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.png\n","version":"3.8.11","publisher":{"name":"phated","email":"blaine@iceddev.com","url":null},"lastPublishedAt":"2015-03-03T03:01:19.028Z"},{"name":"pm2","description":"Production process manager for Node.JS applications with a built-in load balancer.","readme":"![PM2](https://github.com/unitech/pm2/raw/master/pres/pm2.20d3ef.png)\n\n\nPM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.\n\nPM2 is constantly assailed by [more than 300 tests](https://travis-ci.org/Unitech/PM2).\n\nCompatible with [io.js](https://github.com/iojs/io.js) and [Node.js](https://github.com/joyent/node).\nCompatible with CoffeeScript.\nWorks on Linux (stable) & MacOSx (stable) & Windows (bêta).\n\n[![NPM version](https://badge.fury.io/js/pm2.png)](http://badge.fury.io/js/pm2)[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/Unitech/PM2?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)[![Build Status](https://api.travis-ci.org/Unitech/PM2.png?branch=master)](https://travis-ci.org/Unitech/PM2)[![Inline docs](http://inch-ci.org/github/unitech/pm2.svg?branch=master)](http://inch-ci.org/github/unitech/pm2)\n\n[![NPM](https://nodei.co/npm/pm2.png?downloads=true&downloadRank=true)](https://nodei.co/npm/pm2/)\n\n## Install PM2\n\n```bash\n$ npm install pm2 -g\n```\n\n*npm is a builtin CLI when you install Node.js - [Installing Node.js or io.js with NVM](https://keymetrics.io/2015/02/03/installing-node-js-and-io-js-with-nvm/)*\n\n## Start an application\n\n```bash\n$ pm2 start app.js\n```\n\n## Main features\n\n### Process management\n\nOnce apps are started you can list and manage them easily:\n\n![Process listing](https://github.com/unitech/pm2/raw/master/pres/pm2-list.png)\n\nListing all running processes:\n\n```bash\n$ pm2 list\n```\n\nManaging your processes is straightforward:\n\n```bash\n$ pm2 stop     <app_name|id|all>\n$ pm2 restart  <app_name|id|all>\n$ pm2 delete   <app_name|id|all>\n```\n\nTo have more details on a specific process:\n\n```bash\n$ pm2 describe 0\n```\n\n### Monitoring\n\n![Monit](https://github.com/unitech/pm2/raw/master/pres/pm2-monit.png)\n\nMonitoring all processes launched:\n\n```bash\n$ pm2 monit\n```\n\n### Log facilities\n\n![Monit](https://github.com/unitech/pm2/raw/master/pres/pm2-logs.png)\n\nDisplaying logs of a specified process or all processes, in real time:\n\n```bash\n$ pm2 logs\n$ pm2 logs big-api\n$ pm2 flush          # Clear all the logs\n```\n\n### Load balancing / 0s reload downtime\n\nWhen an app is started with the -i <worker number> option, the **cluster** mode is enabled.\n\n**Warning**: It's still a beta feature. If you want to use the embed cluster module or reload with 0s downtime, we recommend the use of node#0.12.0+ node#0.11.16+ or io.js#1.0.2+. We do not support node#0.10.* cluster module anymore!\n\nWith the cluster mode, PM2 enables load balancing between each worker.\nEach HTTP/TCP/UDP request will be forwarded to one specific process at a time.\n\n```bash\n$ pm2 start app.js -i max  # Enable load-balancer and cluster features\n\n$ pm2 reload all           # Reload all apps in 0s manner\n```\n\n### Startup script generation\n\nPM2 can generate and configure a startup script to keep PM2 and your processes alive at every server restart.\n\n```bash\n$ pm2 startup\n# auto-detect platform\n$ pm2 startup [platform]\n# render startup-script for a specific platform, the [platform] could be one of:\n#   ubuntu|centos|redhat|gentoo|systemd|darwin|amazon\n```\n\nTo save a process list just do:\n\n```bash\n$ pm2 save\n```\n\n## Monitoring dashboard\n\n![Dashboard](http://leapfrogui.com/controlfrog/img/cf-layout-1.png)\n\nWe are working on Keymetrics, a monitoring SaaS for PM2. It's still in beta, feel free to give it a try:\n\n[Discover the monitoring dashboard for PM2](https://app.keymetrics.io/#/register)\n\nThanks in advance and we hope that you like PM2!\n\n## Other PM2 features\n\n- [Watch & Restart](https://github.com/Unitech/PM2/blob/development/ADVANCED_README.md#a890)\n- [JSON application declaration](https://github.com/Unitech/PM2/blob/development/ADVANCED_README.md#a10)\n- [Using PM2 in your code](https://github.com/Unitech/PM2/blob/development/ADVANCED_README.md#programmatic-example)\n- [Deployment workflow](https://github.com/Unitech/PM2/blob/development/ADVANCED_README.md#deployment)\n- [Startup script generation (SystemV/Ubuntu/Gentoo/AWS)](https://github.com/Unitech/PM2/blob/master/ADVANCED_README.md#startup-script)\n- [Advanced log management (flush, reload, ilogs)](https://github.com/Unitech/PM2/blob/development/ADVANCED_README.md#9)\n- [GracefullReload](https://github.com/Unitech/PM2/blob/development/ADVANCED_README.md#a690)\n\n## Learn more about PM2\n\n[Advanced README.md](https://github.com/Unitech/PM2/blob/development/ADVANCED_README.md)\n\n## Changelog\n\n[CHANGELOG](https://github.com/Unitech/PM2/blob/master/CHANGELOG.md)\n\n## Contributors\n\n[Contributors](https://github.com/Unitech/PM2/graphs/contributors)\n\n## License\n\nFiles in `lib/` are made available under the terms of the GNU Affero General Public License 3.0 (AGPL 3.0).\nExcept the file `lib/CLI.js` who is made under the terms of the Apache V2 license.\n\n[![Analytics](https://ga-beacon.appspot.com/UA-51734350-4/Unitech/pm2?pixel)](https://github.com/Unitech/pm2)\n","version":"0.12.7","publisher":{"name":"jshkurti","email":"jonishkurti90@gmail.com","url":null},"lastPublishedAt":"2015-03-03T03:00:58.120Z"},{"name":"browserify","description":"browser-side require() the node way","readme":"# browserify\n\n`require('modules')` in the browser\n\nUse a [node](http://nodejs.org)-style `require()` to organize your browser code\nand load modules installed by [npm](https://npmjs.org).\n\nbrowserify will recursively analyze all the `require()` calls in your app in\norder to build a bundle you can serve up to the browser in a single `<script>`\ntag.\n\n[![build status](https://secure.travis-ci.org/substack/node-browserify.png)](http://travis-ci.org/substack/node-browserify)\n\n![browserify!](http://substack.net/images/browserify_logo.png)\n\n# getting started\n\nIf you're new to browserify, check out the\n[browserify handbook](https://github.com/substack/browserify-handbook)\nand the resources on [browserify.org](http://browserify.org/).\n\nCheck out [browserify search](http://browserifysearch.org/) to find\nbrowserify-compatible packages on npm.\n\n# example\n\nWhip up a file, `main.js` with some `require()`s in it. You can use relative\npaths like `'./foo.js'` and `'../lib/bar.js'` or module paths like `'gamma'`\nthat will search `node_modules/` using\n[node's module lookup algorithm](https://github.com/substack/node-resolve).\n\n``` js\nvar foo = require('./foo.js');\nvar bar = require('../lib/bar.js');\nvar gamma = require('gamma');\n\nvar elem = document.getElementById('result');\nvar x = foo(100) + bar('baz');\nelem.textContent = gamma(x);\n```\n\nExport functionality by assigning onto `module.exports` or `exports`:\n\n``` js\nmodule.exports = function (n) { return n * 111 }\n```\n\nNow just use the `browserify` command to build a bundle starting at `main.js`:\n\n```\n$ browserify main.js > bundle.js\n```\n\nAll of the modules that `main.js` needs are included in the `bundle.js` from a\nrecursive walk of the `require()` graph using\n[required](https://github.com/defunctzombie/node-required).\n\nTo use this bundle, just toss a `<script src=\"bundle.js\"></script>` into your\nhtml!\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install -g browserify\n```\n\n# usage\n\n```\nUsage: browserify [entry files] {OPTIONS}\n\nStandard Options:\n\n    --outfile, -o  Write the browserify bundle to this file.\n                   If unspecified, browserify prints to stdout.\n\n    --require, -r  A module name or file to bundle.require()\n                   Optionally use a colon separator to set the target.\n\n      --entry, -e  An entry point of your app\n  \n     --ignore, -i  Replace a file with an empty stub. Files can be globs.\n \n    --exclude, -u  Omit a file from the output bundle. Files can be globs.\n\n   --external, -x  Reference a file from another bundle. Files can be globs.\n  \n  --transform, -t  Use a transform module on top-level files.\n \n    --command, -c  Use a transform command on top-level files.\n   \n  --standalone -s  Generate a UMD bundle for the supplied export name.\n                   This bundle works with other module systems and sets the name\n                   given as a window global if no module system is found.\n  \n       --debug -d  Enable source maps that allow you to debug your files\n                   separately.\n\n       --help, -h  Show this message\n\nFor advanced options, type `browserify --help advanced`.\n\nSpecify a parameter.\n```\n\n```\nAdvanced Options:\n\n  --insert-globals, --ig, --fast    [default: false]\n\n    Skip detection and always insert definitions for process, global,\n    __filename, and __dirname.\n                  \n    benefit: faster builds\n    cost: extra bytes\n \n  --insert-global-vars, --igv\n\n    Comma-separated list of global variables to detect and define.\n    Default: __filename,__dirname,process,Buffer,global\n \n  --detect-globals, --dg            [default: true]\n\n    Detect the presence of process, global, __filename, and __dirname and define\n    these values when present.\n\n    benefit: npm modules more likely to work\n    cost: slower builds\n\n  --ignore-missing, --im            [default: false]\n\n    Ignore `require()` statements that don't resolve to anything.\n\n  --noparse=FILE\n\n    Don't parse FILE at all. This will make bundling much, much faster for giant\n    libs like jquery or threejs.\n\n  --no-builtins\n\n    Turn off builtins. This is handy when you want to run a bundle in node which\n    provides the core builtins.\n\n  --no-commondir\n \n    Turn off setting a commondir. This is useful if you want to preserve the\n    original paths that a bundle was generated with. \n \n  --no-bundle-external\n\n    Turn off bundling of all external modules. This is useful if you only want\n    to bundle your local files.\n\n  --bare \n\n    Alias for both --no-builtins, --no-commondir, and sets --insert-global-vars\n    to just \"__filename,__dirname\". This is handy if you want to run bundles in\n    node.\n\n  --full-paths\n\n    Turn off converting module ids into numerical indexes. This is useful for\n    preserving the original paths that a bundle was generated with.\n\n  --deps\n  \n    Instead of standard bundle output, print the dependency array generated by\n    module-deps.\n\n  --list\n \n    Print each file in the dependency graph. Useful for makefiles.\n\n  --extension=EXTENSION\n\n    Consider files with specified EXTENSION as modules, this option can used\n    multiple times.\n\n  --ignore-transform=MODULE, --it MODULE\n\n    Any transforms matching the given name will be ignored, including\n    those in your module dependencies. \n\n  --global-transform=MODULE, -g MODULE\n\n    Use a transform module on all files after any ordinary transforms have run.\n\n  --plugin=MODULE, -p MODULE\n\n    Register MODULE as a plugin.\n\nPassing arguments to transforms and plugins:\n\n  For -t, -g, and -p, you may use subarg syntax to pass options to the\n  transforms or plugin function as the second parameter. For example:\n\n    -t [ foo -x 3 --beep ]\n\n  will call the `foo` transform for each applicable file by calling:\n\n    foo(file, { x: 3, beep: true })\n\n```\n\n# compatibility\n\nMany [npm](http://npmjs.org) modules that don't do IO will just work after being\nbrowserified. Others take more work.\n\nMany node built-in modules have been wrapped to work in the browser, but only\nwhen you explicitly `require()` or use their functionality.\n\nWhen you `require()` any of these modules, you will get a browser-specific shim:\n\n* [assert](https://npmjs.org/package/assert)\n* [buffer](https://npmjs.org/package/buffer)\n* [console](https://npmjs.org/package/console-browserify)\n* [constants](https://npmjs.org/package/constants-browserify)\n* [crypto](https://npmjs.org/package/crypto-browserify)\n* [domain](https://npmjs.org/package/domain-browser)\n* [events](https://npmjs.org/package/events-browserify)\n* [http](https://npmjs.org/package/http-browserify)\n* [https](https://npmjs.org/package/https-browserify)\n* [os](https://npmjs.org/package/os-browserify)\n* [path](https://npmjs.org/package/path-browserify)\n* [punycode](https://npmjs.org/package/punycode)\n* [querystring](https://npmjs.org/package/querystring)\n* [stream](https://npmjs.org/package/stream-browserify)\n* [string_decoder](https://npmjs.org/package/string_decoder)\n* [timers](https://npmjs.org/package/timers-browserify)\n* [tty](https://npmjs.org/package/tty-browserify)\n* [url](https://npmjs.org/package/url)\n* [util](https://npmjs.org/package/util)\n* [vm](https://npmjs.org/package/vm-browserify)\n* [zlib](https://npmjs.org/package/browserify-zlib)\n\nAdditionally, if you use any of these variables, they\n[will be defined](https://github.com/substack/insert-module-globals)\nin the bundled output in a browser-appropriate way:\n\n* [process](https://npmjs.org/package/process)\n* [Buffer](https://npmjs.org/package/buffer)\n* global - top-level scope object (window)\n* __filename - file path of the currently executing file\n* __dirname - directory path of the currently executing file\n\n# more examples\n\n## external requires\n\nYou can just as easily create a bundle that will export a `require()` function so\nyou can `require()` modules from another script tag. Here we'll create a\n`bundle.js` with the [through](https://npmjs.org/package/through)\nand [duplexer](https://npmjs.org/package/duplexer) modules.\n\n```\n$ browserify -r through -r duplexer -r ./my-file.js:my-module > bundle.js\n```\n\nThen in your page you can do:\n\n``` html\n<script src=\"bundle.js\"></script>\n<script>\n  var through = require('through');\n  var duplexer = require('duplexer');\n  var myModule = require('my-module');\n  /* ... */\n</script>\n```\n\n## external source maps\n\nIf you prefer the source maps be saved to a separate `.js.map` source map file, you may use\n[exorcist](https://github.com/thlorenz/exorcist) in order to achieve that. It's as simple as:\n\n```\n$ browserify main.js --debug | exorcist bundle.js.map > bundle.js \n```\n\nLearn about additional options [here](https://github.com/thlorenz/exorcist#usage).\n\n## multiple bundles\n\nIf browserify finds a `require`d function already defined in the page scope, it\nwill fall back to that function if it didn't find any matches in its own set of\nbundled modules.\n\nIn this way, you can use browserify to split up bundles among multiple pages to\nget the benefit of caching for shared, infrequently-changing modules, while\nstill being able to use `require()`. Just use a combination of `--external` and\n`--require` to factor out common dependencies.\n\nFor example, if a website with 2 pages, `beep.js`:\n\n``` js\nvar robot = require('./robot.js');\nconsole.log(robot('beep'));\n```\n\nand `boop.js`:\n\n``` js\nvar robot = require('./robot.js');\nconsole.log(robot('boop'));\n```\n\nboth depend on `robot.js`:\n\n``` js\nmodule.exports = function (s) { return s.toUpperCase() + '!' };\n```\n\n```\n$ browserify -r ./robot.js > static/common.js\n$ browserify -x ./robot.js beep.js > static/beep.js\n$ browserify -x ./robot.js boop.js > static/boop.js\n```\n\nThen on the beep page you can have:\n\n``` html\n<script src=\"common.js\"></script>\n<script src=\"beep.js\"></script>\n```\n\nwhile the boop page can have:\n\n``` html\n<script src=\"common.js\"></script>\n<script src=\"boop.js\"></script>\n```\n\nThis approach using `-r` and `-x` works fine for a small number of split assets,\nbut there are plugins for automatically factoring out components which are\ndescribed in the\n[partitioning section of the browserify handbook](https://github.com/substack/browserify-handbook#partitioning).\n\n## api example\n\nYou can use the API directly too:\n\n``` js\nvar browserify = require('browserify');\nvar b = browserify();\nb.add('./browser/main.js');\nb.bundle().pipe(process.stdout);\n```\n\n# methods\n\n``` js\nvar browserify = require('browserify')\n```\n\n## var b = browserify(files=[] or opts={})\n\nCreate a browserify instance `b` from the entry main `files` or `opts.entries`.\n`files` can be an array of files or a single file.\n\nFor each `file` in `files`, if `file` is a stream, its contents will be used.\nYou should use `opts.basedir` when using streaming files so that relative\nrequires will know where to resolve from.\n\n`opts.noParse` is an array which will skip all require() and global parsing for\neach file in the array. Use this for giant libs like jquery or threejs that\ndon't have any requires or node-style globals but take forever to parse.\n\n`opts.extensions` is an array of optional extra extensions for the module lookup\nmachinery to use when the extension has not been specified.\nBy default browserify considers only `.js` and `.json` files in such cases.\n\n`opts.basedir` is the directory that browserify starts bundling from for\nfilenames that start with `.`.\n\n`opts.commondir` sets the algorithm used to parse out the common paths. Use\n`false` to turn this off, otherwise it uses the\n[commondir](https://npmjs.org/package/commondir) module.\n\n`opts.fullPaths` disables converting module ids into numerical indexes. This is\nuseful for preserving the original paths that a bundle was generated with.\n\n`opts.builtins` sets the list of built-ins to use, which by default is set in\n`lib/builtins.js` in this distribution.\n\n`opts.bundleExternal` boolean option to set if external modules should be\nbundled. Defaults to true.\n\nWhen `opts.insertGlobals` is true, always insert `process`, `global`,\n`__filename`, and `__dirname` without analyzing the AST for faster builds but\nlarger output bundles. Default false.\n\nWhen `opts.detectGlobals` is true, scan all files for `process`, `global`,\n`__filename`, and `__dirname`, defining as necessary. With this option npm\nmodules are more likely to work but bundling takes longer. Default true.\n\nWhen `opts.debug` is true, add a source map inline to the end of the bundle.\nThis makes debugging easier because you can see all the original files if\nyou are in a modern enough browser.\n\nWhen `opts.standalone` is a non-empty string, a standalone module is created\nwith that name and a [umd](https://github.com/forbeslindesay/umd) wrapper.\nYou can use namespaces in the standalone global export using a `.` in the string\nname as a separator. For example: `'A.B.C'` \n\nNote that in standalone mode the `require()` calls from the original source will\nstill be around, which may trip up AMD loaders scanning for `require()` calls.\nYou can remove these calls with\n[derequire](https://npmjs.org/package/derequire):\n\n```\n$ npm install -g derequire\n$ browserify main.js --standalone Foo | derequire > bundle.js\n```\n\n`opts.insertGlobalVars` will be passed to\n[insert-module-globals](http://npmjs.org/package/insert-module-globals)\nas the `opts.vars` parameter.\n\n`opts.externalRequireName` defaults to `'require'` in `expose` mode but you can\nuse another name.\n\nNote that if files do not contain javascript source code then you also need to\nspecify a corresponding transform for them.\n\nAll other options are forwarded along to\n[module-deps](https://npmjs.org/package/module-deps)\nand [browser-pack](https://npmjs.org/package/browser-pack) directly.\n\n## b.add(file, opts)\n\nAdd an entry file from `file` that will be executed when the bundle loads.\n\nIf `file` is an array, each item in `file` will be added as an entry file.\n\n## b.require(file, opts)\n\nMake `file` available from outside the bundle with `require(file)`.\n\nThe `file` param is anything that can be resolved by `require.resolve()`.\n\n`file` can also be a stream, but you should also use `opts.basedir` so that\nrelative requires will be resolvable.\n\nIf `file` is an array, each item in `file` will be required.\nIn `file` array form, you can use a string or object for each item. Object items\nshould have a `file` property and the rest of the parameters will be used for\nthe `opts`.\n\nUse the `expose` property of opts to specify a custom dependency name. \n`require('./vendor/angular/angular.js', {expose: 'angular'})` enables `require('angular')`\n\n## b.bundle(cb)\n\nBundle the files and their dependencies into a single javascript file.\n\nReturn a readable stream with the javascript file contents or\noptionally specify a `cb(err, buf)` to get the buffered results.\n\n## b.external(file)\n\nPrevent `file` from being loaded into the current bundle, instead referencing\nfrom another bundle.\n\nIf `file` is an array, each item in `file` will be externalized.\n\nIf `file` is another bundle, that bundle's contents will be read and excluded\nfrom the current bundle as the bundle in `file` gets bundled.\n\n## b.ignore(file)\n\nPrevent the module name or file at `file` from showing up in the output bundle.\n\nInstead you will get a file with `module.exports = {}`.\n\n## b.exclude(file)\n\nPrevent the module name or file at `file` from showing up in the output bundle.\n\nIf your code tries to `require()` that file it will throw unless you've provided\nanother mechanism for loading it.\n\n## b.transform(tr, opts={})\n\nTransform source code before parsing it for `require()` calls with the transform\nfunction or module name `tr`.\n\nIf `tr` is a function, it will be called with `tr(file)` and it should return a\n[through-stream](https://github.com/substack/stream-handbook#through)\nthat takes the raw file contents and produces the transformed source.\n\nIf `tr` is a string, it should be a module name or file path of a\n[transform module](https://github.com/substack/module-deps#transforms)\nwith a signature of:\n\n``` js\nvar through = require('through');\nmodule.exports = function (file) { return through() };\n```\n\nYou don't need to necessarily use the\n[through](https://npmjs.org/package/through) module. Browserify is compatible with the newer, more verbose [Transform streams](http://nodejs.org/api/stream.html#stream_class_stream_transform_1) built into Node v0.10.\n\nHere's how you might compile coffee script on the fly using `.transform()`:\n\n``` js\nvar coffee = require('coffee-script');\nvar through = require('through');\n\nb.transform(function (file) {\n    var data = '';\n    return through(write, end);\n    \n    function write (buf) { data += buf }\n    function end () {\n        this.queue(coffee.compile(data));\n        this.queue(null);\n    }\n});\n```\n\nNote that on the command-line with the `-c` flag you can just do:\n\n```\n$ browserify -c 'coffee -sc' main.coffee > bundle.js\n```\n\nOr better still, use the [coffeeify](https://github.com/jnordberg/coffeeify)\nmodule:\n\n```\n$ npm install coffeeify\n$ browserify -t coffeeify main.coffee > bundle.js\n```\n\nIf `opts.global` is `true`, the transform will operate on ALL files, despite\nwhether they exist up a level in a `node_modules/` directory. Use global\ntransforms cautiously and sparingly, since most of the time an ordinary\ntransform will suffice. You can also not configure global transforms in a\n`package.json` like you can with ordinary transforms.\n\nGlobal transforms always run after any ordinary transforms have run.\n\nTransforms may obtain options from the command-line with\n[subarg](https://npmjs.org/package/subarg) syntax:\n\n```\n$ browserify -t [ foo --bar=555 ] main.js\n```\n\nor from the api:\n\n```\nb.transform('foo', { bar: 555 })\n```\n\nIn both cases, these options are provided as the second argument to the\ntransform function:\n\n```\nmodule.exports = function (file, opts) { /* opts.bar === 555 */ }\n```\n\nOptions sent to the browserify constructor are also provided under\n`opts._flags`. These browserify options are sometimes required if your transform\nneeds to do something different when browserify is run in debug mode, for\nexample.\n\n## b.plugin(plugin, opts)\n\nRegister a `plugin` with `opts`. Plugins can be a string module name or a\nfunction the same as transforms.\n\n`plugin(b, opts)` is called with the browserify instance `b`.\n\nFor more information, consult the plugins section below.\n\n## b.pipeline\n\nThere is an internal\n[labeled-stream-splicer](https://npmjs.org/package/labeled-stream-splicer)\npipeline with these labels:\n\n* `'record'` - save inputs to play back later on subsequent `bundle()` calls\n* `'deps'` - [module-deps](https://npmjs.org/package/module-deps)\n* `'json'` - adds `module.exports=` to the beginning of json files\n* `'unbom'` - remove byte-order markers\n* `'unshebang'` - remove #! labels on the first line\n* `'syntax'` - check for syntax errors\n* `'sort'` - sort the dependencies for deterministic bundles\n* `'dedupe'` - remove duplicate source contents\n* `'label'` - apply integer labels to files\n* `'emit-deps'` - emit `'dep'` event\n* `'debug'` - apply source maps\n* `'pack'` - [browser-pack](https://npmjs.org/package/browser-pack)\n* `'wrap'` - apply final wrapping, `require=` and a newline and semicolon\n\nYou can call `b.get()` with a label name to get a handle on a stream pipeline\nthat you can `push()`, `unshift()`, or `splice()` to insert your own transform\nstreams.\n\n# b.reset(opts)\n\nReset the pipeline back to a normal state. This function is called automatically\nwhen `bundle()` is called multiple times.\n\nThis function triggers a 'reset' event.\n\n# package.json\n\nbrowserify uses the `package.json` in its module resolution algorithm, just like\nnode. If there is a `\"main\"` field, browserify will start resolving the package\nat that point. If there is no `\"main\"` field, browserify will look for an\n`\"index.js\"` file in the module root directory. Here are some more\nsophisticated things you can do in the package.json:\n\n## browser field\n\nThere is a special \"[browser](https://gist.github.com/4339901)\" field you can\nset in your package.json on a per-module basis to override file resolution for\nbrowser-specific versions of files.\n\nFor example, if you want to have a browser-specific module entry point for your\n`\"main\"` field you can just set the `\"browser\"` field to a string:\n\n``` json\n\"browser\": \"./browser.js\"\n```\n\nor you can have overrides on a per-file basis:\n\n``` json\n\"browser\": {\n  \"fs\": \"level-fs\",\n  \"./lib/ops.js\": \"./browser/opts.js\"\n}\n```\n\nNote that the browser field only applies to files in the local module, and like\ntransforms, it doesn't apply into `node_modules` directories.\n\n## browserify.transform\n\nYou can specify source transforms in the package.json in the\n`browserify.transform` field. There is more information about how source\ntransforms work in package.json on the\n[module-deps readme](https://github.com/substack/module-deps#transforms).\n\nFor example, if your module requires [brfs](https://npmjs.org/package/brfs), you\ncan add\n\n``` json\n\"browserify\": { \"transform\": [ \"brfs\" ] }\n```\n\nto your package.json. Now when somebody `require()`s your module, brfs will\nautomatically be applied to the files in your module without explicit\nintervention by the person using your module. Make sure to add transforms to\nyour package.json dependencies field.\n\n# events\n\n## b.on('file', function (file, id, parent) {})\n## b.pipeline.on('file', function (file, id, parent) {})\n\nWhen a file is resolved for the bundle, the bundle emits a `'file'` event with\nthe full `file` path, the `id` string passed to `require()`, and the `parent`\nobject used by\n[browser-resolve](https://github.com/defunctzombie/node-browser-resolve).\n\nYou could use the `file` event to implement a file watcher to regenerate bundles\nwhen files change.\n\n## b.on('package', function (pkg) {})\n## b.pipeline.on('package', function (pkg) {})\n\nWhen a package file is read, this event fires with the contents. The package\ndirectory is available at `pkg.__dirname`.\n\n## b.on('bundle', function (bundle) {})\n\nWhen `.bundle()` is called, this event fires with the `bundle` output stream.\n\n## b.on('reset', function () {})\n\nWhen the `.reset()` method is called or implicitly called by another call to\n`.bundle()`, this event fires.\n\n## b.on('transform', function (tr, file) {})\n## b.pipeline.on('transform', function (tr, file) {})\n\nWhen a transform is applied to a file, the `'transform'` event fires on the\nbundle stream with the transform stream `tr` and the `file` that the transform\nis being applied to.\n\n# plugins\n\nFor some more advanced use-cases, a transform is not sufficiently extensible.\nPlugins are modules that take the bundle instance as their first parameter and\nan option hash as their second.\n\nPlugins can be used to do perform some fancy features that transforms can't do.\nFor example, [factor-bundle](https://npmjs.org/package/factor-bundle) is a\nplugin that can factor out common dependencies from multiple entry-points into a\ncommon bundle. Use plugins with `-p` and pass options to plugins with\n[subarg](https://npmjs.org/package/subarg) syntax:\n\n```\nbrowserify x.js y.js -p [ factor-bundle -o bundle/x.js -o bundle/y.js ] \\\n  > bundle/common.js\n```\n\nFor a list of plugins, consult the\n[browserify-plugin tag](https://npmjs.org/browse/keyword/browserify-plugin)\non npm.\n\n# list of source transforms\n\nThere is a [wiki page that lists the known browserify\ntransforms](https://github.com/substack/node-browserify/wiki/list-of-transforms).\n\nIf you write a transform, make sure to add your transform to that wiki page and\nadd a package.json keyword of `browserify-transform` so that\n[people can browse for all the browserify\ntransforms](https://npmjs.org/browse/keyword/browserify-transform) on npmjs.org.\n\n# third-party tools\n\nThere is a [wiki page that lists the known browserify\ntools](https://github.com/substack/node-browserify/wiki/browserify-tools).\n\nIf you write a tool, make sure to add it to that wiki page and\nadd a package.json keyword of `browserify-tool` so that\n[people can browse for all the browserify\ntools](https://npmjs.org/browse/keyword/browserify-tool) on npmjs.org.\n\n# changelog\n\nReleases are documented in\n[changelog.markdown](changelog.markdown) and on the\n[browserify twitter feed](https://twitter.com/browserify).\n\n# license\n\nMIT\n\n![browserify!](http://substack.net/images/browserify/browserify.png)\n","version":"9.0.3","publisher":{"name":"substack","email":"mail@substack.net","url":null},"lastPublishedAt":"2015-03-03T02:59:37.468Z"},{"name":"makemehapi","description":"Self guided workshops to teach you about hapi.","readme":"# Make Me Hapi\n\n[![NPM](https://nodei.co/npm/makemehapi.png?downloads=true&stars=true)](https://nodei.co/npm/makemehapi/)\n\nLead Maintainer: [Ben Acker](https://github.com/nvcexploder)\n\nLearn all about [hapi](http://hapijs.com) through a series of challenges.\n\n![makemehapi](https://raw.github.com/hapijs/makemehapi/master/images/makemehapi.png)\n\n## Getting Started\n\n1. Install **makemehapi** by running `npm install -g makemehapi`.\n2. Run `makemehapi`\n\n","version":"1.1.0","publisher":{"name":"nvcexploder","email":"benacker@gmail.com","url":null},"lastPublishedAt":"2015-03-03T02:59:35.838Z"},{"name":"cordova","description":"Cordova command line interface tool","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Amazon Fire OS\n- Android\n- BlackBerry 10\n- iOS\n- Ubuntu\n- Windows Phone 8\n- Windows 8\n\n# Requirements\n\n* [Node.js](http://nodejs.org/)\n* SDKs for each platform you wish to support:\n  - **Android**: [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - **amazon-fireos**: [Amazon Fire OS SDK](https://developer.amazon.com/public/solutions/platforms/android-fireos/docs/building-and-testing-your-hybrid-app) - **NOTE** This tool will not work unless you have Android SDK installed and paths are updated as mentioned above. In addition you need to install AmazonWebView SDK and copy awv_interface.jar on **Mac/Linux** system to ~/.cordova/lib/commonlibs folder or on **Windows** %USERPROFILE%/.cordova/lib/coomonlibs. If commonlibs folder does not exist then create one.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n  - **BlackBerry 10**: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - **iOS**: [iOS SDK](http://developer.apple.com) with the latest `Xcode` and `Xcode Command Line Tools`\n  - **Windows Phone**: [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\n`cordova-cli` has been tested on **Mac OS X**, **Linux**, **Windows 7**, and **Windows 8**.\n\nPlease note that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 8 on Mac OS X, nor can you build for iOS on Windows.\n\n# Install\n\nUbuntu packages are available in a PPA for Ubuntu 13.10 (Saucy) (the current release) as well as 14.04 (Trusty) (under development).\n\n    sudo apt-add-repository ppa:cordova-ubuntu/ppa\n    sudo apt-get update\n    sudo apt-get install cordova-cli\n    npm install -g cordova\n\nTo build an application for the Ubuntu platform, the following extra packages are required:\n\n    sudo apt-get install cmake debhelper libx11-dev libicu-dev pkg-config qtbase5-dev qtchooser qtdeclarative5-dev qtfeedback5-dev qtlocation5-dev qtmultimedia5-dev qtpim5-dev qtsensors5-dev qtsystems5-dev\n\n\n## Installing from master\n\nYou'll need to install both [CLI](https://git-wip-us.apache.org/repos/asf/cordova-cli.git) and [Plugman](https://git-wip-us.apache.org/repos/asf/cordova-plugman.git) from `git`. Running the *npm version* of one and *(git) master version* of the other is likely to end with you suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n## Installing on Ubuntu\n\n    apt-get install cordova-cli\n\n\n# Getting Started\n\n`cordova-cli` has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Commands\n\n- `help` display a help page with all available commands\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms for which the project will build\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platform build targets from the project\n- `platform [up | update] <platform> ` - updates the Cordova version used for the given platform\n- `plugin [ls | list]` list all plugins included in the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) plugins from the project.\n- `plugin search [<keyword1> <keyword2> ...]` search the plugin registry for plugins matching the list of keywords\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. It is then ready for building by `Eclipse`, `Xcode`, etc.\n- `compile [platform...]` compiles the app into a binary for each targetted platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve [port]` launch a local web server allowing you to access each  platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming `cordova-cli` as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your `cordova-cli` install.\n\n# Project Directory Structure\nA Cordova application built with `cordova-cli` will have the following directory structure:\n\n    myApp/\n    |-- config.xml\n    |-- hooks/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## hooks/\nThis directory may contains scripts used to customize cordova commands. This\ndirectory used to exist at `.cordova/hooks`, but has now been moved to the\nproject root. Any scripts you add to these directories will be executed before\nand after the commands corresponding to the directory name. Useful for\nintegrating your own build systems or integrating with version control systems.\n\nRefer to [hooks-README.md](https://github.com/apache/cordova-lib/blob/master/cordova-lib/templates/hooks-README.md) for more information.\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger **Node** application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your Node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- hooks/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and their versions. Related to this: which `Xcode` version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\n`cordova-cli` will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command `android list target`.  If you see:\n\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to fix your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open **Visual Studio** to see your app live.  You are still able to use the following commands with windows8:\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the `.sln` in the `platforms/windows8` folder using **Visual Studio 2012**.\n\n**Visual Studio** will tell you to reload the project if you run any of the above commands while the project is loaded.\n\n## Amazon Fire OS\n\nAmazon Fire OS does not include the ability to emulate. You are still able to use the following commands with Amazon Fire OS\n\n- `platform add amazon-fireos`\n- `platform remove amazon-fireos`\n- `prepare amazon-fireos`\n- `compile amazon-fireos`\n- `build amazon-fireos`\n\n## Ubuntu\n\nThe initial release of cordova-ubuntu does not support building applications for armhf devices automatically. It is possible to produce applications and click packages in a few steps though.\n\nThis bug report documents the issue and solutions for it: https://bugs.launchpad.net/ubuntu/+source/cordova-ubuntu/+bug/1260500 A future release will let developers cross-compile armhf click packages directly from an x86 desktop.\n\n## Firefox OS\n\nFirefox OS does not include the ability to emulate, run and serve. After building, you will have to open the firefoxos platform directory of your app in the App Manager that comes with every firefox browser. \n","version":"4.3.0","publisher":{"name":"stevegill","email":"stevengill97@gmail.com","url":null},"lastPublishedAt":"2015-03-03T02:59:23.750Z"},{"name":"cordova-lib","description":"Apache Cordova tools core lib and API","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n\n# cordova-lib\nContains npm modules used primarily by [cordova](https://github.com/apache/cordova-cli/) and [plugman](https://github.com/apache/cordova-plugman/).\n\n## Setup\n* Clone this repository onto your local machine. \n    `git clone https://git-wip-us.apache.org/repos/asf/cordova-lib.git`\n* In terminal, navigate to the inner cordova-lib directory.\n    `cd cordova-lib/cordova-lib`\n* Install dependencies and npm-link\n    `npm install && npm link`\n* Navigate to CLI and Plugman directories and link cordova-lib\n    `cd ../../cordova-cli && npm link cordova-lib && npm install`\n    `cd ../../cordova-plugman && npm link cordova-lib && npm install`\n","version":"4.3.0","publisher":{"name":"stevegill","email":"stevengill97@gmail.com","url":null},"lastPublishedAt":"2015-03-03T02:59:21.226Z"}],"offset":12,"hasMore":true}