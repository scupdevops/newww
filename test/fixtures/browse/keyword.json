{"results":[{"name":"response-redirect","description":"response.redirect() prototype method","readme":"","version":"0.0.1","publisher":{"name":"jaredhanson","email":"jaredhanson@gmail.com","url":null},"lastPublishedAt":"2015-03-03T02:24:03.294Z"},{"name":"http-duplex","description":"turn (req,res) pairs into a single duplex stream","readme":"# http-duplex\n\nTurn (req,res) pairs into a single readable/writable stream.\n\n[![build status](https://secure.travis-ci.org/substack/http-duplex.png)](http://travis-ci.org/substack/http-duplex)\n\n# example\n\n# methods\n\n``` js\nvar httpDuplex = require('http-duplex')\n```\n\n## var dup = httpDuplex(req, res)\n\nReturn a new readable/writable duplex stream `dup` from the http request `req`\nand http response `res`.\n\n`dup` has all the same methods has both `req` and `res`, but on a single object.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install http-duplex\n```\n\n# license\n\nMIT\n","version":"0.0.2","publisher":{"name":"substack","email":"mail@substack.net","url":null},"lastPublishedAt":"2015-03-03T02:24:04.834Z"},{"name":"wget","description":"wget in nodejs.","readme":"node-wget\n=========\n\nwget in nodejs","version":"0.0.1","publisher":{"name":"wuchengwei","email":"meegodevelop@gmail.com","url":null},"lastPublishedAt":"2015-03-03T02:24:07.412Z"},{"name":"response-stream","description":"pass http server response methods through to the next destination pipe","readme":"","version":"0.0.0","lastPublishedAt":"2015-03-03T02:24:06.824Z"},{"name":"tunnel","description":"Node HTTP/HTTPS Agents for tunneling proxies","readme":"# node-tunnel - HTTP/HTTPS Agents for tunneling proxies\n\n## Example\n\n```javascript\nvar tunnel = require('tunnel');\n\nvar tunnelingAgent = tunnel.httpsOverHttp({\n  proxy: {\n    host: 'localhost',\n    port: 3128\n  }\n});\n\nvar req = https.request({\n  host: 'example.com',\n  port: 443,\n  agent: tunnelingAgent\n});\n```\n\n## Installation\n\n    $ npm install tunnel\n\n## Usages\n\n### HTTP over HTTP tunneling\n\n```javascript\nvar tunnelingAgent = tunnel.httpOverHttp({\n  maxSockets: poolSize, // Defaults to 5\n\n  proxy: { // Proxy settings\n    host: proxyHost, // Defaults to 'localhost'\n    port: proxyPort, // Defaults to 80\n    localAddress: localAddress, // Local interface if necessary\n\n    // Basic authorization for proxy server if necessary\n    proxyAuth: 'user:password',\n\n    // Header fields for proxy server if necessary\n    headers: {\n      'User-Agent': 'Node'\n    }\n  }\n});\n\nvar req = http.request({\n  host: 'example.com',\n  port: 80,\n  agent: tunnelingAgent\n});\n```\n\n### HTTPS over HTTP tunneling\n\n```javascript\nvar tunnelingAgent = tunnel.httpsOverHttp({\n  maxSockets: poolSize, // Defaults to 5\n\n  // CA for origin server if necessary\n  ca: [ fs.readFileSync('origin-server-ca.pem')],\n\n  // Client certification for origin server if necessary\n  key: fs.readFileSync('origin-server-key.pem'),\n  cert: fs.readFileSync('origin-server-cert.pem'),\n\n  proxy: { // Proxy settings\n    host: proxyHost, // Defaults to 'localhost'\n    port: proxyPort, // Defaults to 80\n    localAddress: localAddress, // Local interface if necessary\n\n    // Basic authorization for proxy server if necessary\n    proxyAuth: 'user:password',\n\n    // Header fields for proxy server if necessary\n    headers: {\n      'User-Agent': 'Node'\n    },\n  }\n});\n\nvar req = https.request({\n  host: 'example.com',\n  port: 443,\n  agent: tunnelingAgent\n});\n```\n\n### HTTP over HTTPS tunneling\n\n```javascript\nvar tunnelingAgent = tunnel.httpOverHttps({\n  maxSockets: poolSize, // Defaults to 5\n\n  proxy: { // Proxy settings\n    host: proxyHost, // Defaults to 'localhost'\n    port: proxyPort, // Defaults to 443\n    localAddress: localAddress, // Local interface if necessary\n\n    // Basic authorization for proxy server if necessary\n    proxyAuth: 'user:password',\n\n    // Header fields for proxy server if necessary\n    headers: {\n      'User-Agent': 'Node'\n    },\n\n    // CA for proxy server if necessary\n    ca: [ fs.readFileSync('origin-server-ca.pem')],\n\n    // Server name for verification if necessary\n    servername: 'example.com',\n\n    // Client certification for proxy server if necessary\n    key: fs.readFileSync('origin-server-key.pem'),\n    cert: fs.readFileSync('origin-server-cert.pem'),\n  }\n});\n\nvar req = http.request({\n  host: 'example.com',\n  port: 80,\n  agent: tunnelingAgent\n});\n```\n\n### HTTPS over HTTPS tunneling\n\n```javascript\nvar tunnelingAgent = tunnel.httpsOverHttps({\n  maxSockets: poolSize, // Defaults to 5\n\n  // CA for origin server if necessary\n  ca: [ fs.readFileSync('origin-server-ca.pem')],\n\n  // Client certification for origin server if necessary\n  key: fs.readFileSync('origin-server-key.pem'),\n  cert: fs.readFileSync('origin-server-cert.pem'),\n\n  proxy: { // Proxy settings\n    host: proxyHost, // Defaults to 'localhost'\n    port: proxyPort, // Defaults to 443\n    localAddress: localAddress, // Local interface if necessary\n\n    // Basic authorization for proxy server if necessary\n    proxyAuth: 'user:password',\n\n    // Header fields for proxy server if necessary\n    headers: {\n      'User-Agent': 'Node'\n    }\n\n    // CA for proxy server if necessary\n    ca: [ fs.readFileSync('origin-server-ca.pem')],\n\n    // Server name for verification if necessary\n    servername: 'example.com',\n\n    // Client certification for proxy server if necessary\n    key: fs.readFileSync('origin-server-key.pem'),\n    cert: fs.readFileSync('origin-server-cert.pem'),\n  }\n});\n\nvar req = https.request({\n  host: 'example.com',\n  port: 443,\n  agent: tunnelingAgent\n});\n```\n\n## License\n\nThis module is released under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","version":"0.0.3","publisher":{"name":"koichik","email":"koichik@improvement.jp","url":null},"lastPublishedAt":"2015-03-03T02:24:37.141Z"},{"name":"parse-json-response","description":"Gather up a JSON response from a server, and call the cb","readme":"# parse-json-response\n\nGather up a JSON response from a server, and call the cb\n\n## USAGE\n\n```javascript\nvar parse = require('parse-json-response')\n\n// Handy response-event-handler function returny thing\n\n// parse(cb) -> function(res)\nhttp.get(someApi, parse(function(er, data, res) {\n  if (er)\n    console.error('it failed', res.headers, er)\n  else\n    console.error('it worked', res.headers, data)\n}))\n\n// or, if you have the response object somehow already\n\nhttp.get(someApi, function(res) {\n  // parse(res, cb) -> null\n  parse(res, function(er, data) {\n    if (er)\n      console.error('it failed', res.headers, er)\n    else\n      console.error('it worked', res.headers, data)\n  })\n})\n```\n\nIf the response statusCode is not in the 2xx range, then it's assumed\nto be an error, and will create an error object.  The error object\nreturned is decorated with `statusCode`.  The `data` arg is always set\nif the response body was parseable.\n","version":"1.0.1","publisher":{"name":"isaacs","email":"i@izs.me","url":null},"lastPublishedAt":"2015-03-03T02:24:32.558Z"},{"name":"multipart-stream","description":"Simple streaming nodejs module to build http multipart bodies.","readme":"# multipart-stream\nSimple streaming nodejs module to build http multipart bodies. Use [browserify](https://github.com/substack/browserify) to make it browser-compatible.\n\n[![testling badge](https://ci.testling.com/hendrikcech/multipart-stream.png)](https://ci.testling.com/hendrikcech/multipart-stream)\n\n## install\n\tnpm install multipart-stream\n\n# usage\n```javascript\nvar Multipart = require('multipart-stream')\n\n// returns a readable stream\nvar mp = new Multipart()\n\nmp.addPart({\n\t// by default no headers are set\n\theaders: {\n\t\t'Content-Type': 'text/plain'\n\t},\n\t// pass either a string, a buffer or a readable stream\n\tbody: 'Simple string'\n})\n\nvar data = ''\nmp.on('data', function(d) {\n\tdata += d\n}).on('end', function() {\n\tconsole.log(data)\n})\n```\n\n# test\n\tnpm test\n\n# license\nThe MIT License (MIT)\n\nCopyright (c) 2014 Hendrik Cech\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.","version":"1.0.0","publisher":{"name":"hendrikcech","email":"hendrik.cech@gmail.com","url":null},"lastPublishedAt":"2015-03-03T02:25:02.133Z"},{"name":"proxy","description":"An HTTP proxy written with Node.js (think Squid)","readme":"proxy\n=====\n### An HTTP proxy written with Node.js (think Squid)\n[![Build Status](https://travis-ci.org/TooTallNate/proxy.png?branch=master)](https://travis-ci.org/TooTallNate/proxy)\n\nThis module provides standard \"HTTP proxy\" logic. You can script your own server\nusing the `proxy` server API. Be sure to take a look at the \"Examples\" section\nbelow.\n\nThere is also a companion `proxy(1)` CLI tool, which spawns an HTTP(s) proxy\nserver with the specified options.\n\nYou could think of `proxy(1)` as similar to some of the other popular open\nsource HTTP proxy software:\n\n * [Squid][]\n * [Privoxy][]\n * [Apache][] with [`mod_proxy`][mod_proxy]\n * [More…](http://wikipedia.org/wiki/Proxy_server#Web_proxy_servers)\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install proxy\n```\n\nIf you would like to have the `proxy(1)` CLI program in your `$PATH`, then\ninstall \"globally\":\n\n``` bash\n$ npm install -g proxy\n```\n\n\nExamples\n--------\n\n#### Basic HTTP(s) proxy server\n\nA basic HTTP(s) server with all the default options. All requests are allowed.\nCONNECT HTTP method works as well.\n\n``` js\nvar http = require('http');\nvar setup = require('proxy');\n\nvar server = setup(http.createServer());\nserver.listen(3128, function () {\n  var port = server.address().port;\n  console.log('HTTP(s) proxy server listening on port %d', port);\n});\n```\n\n\nCLI Tool Examples\n-----------------\n\nThe `proxy(1)` CLI tool can be used to spawn HTTP(s) proxy server instances with\nvarious options.\n\n#### Port to bind to\n\nPass the `-p`/`--port` option to with a port number to specify a TCP port to\nbind to. Defaults to __3128__ if none is specified.\n\n``` bash\n$ proxy --port 8080\n```\n\n#### Custom `Proxy-Authenticate` command\n\nPass the `-a`/`--authenticate` switch with a command to execute when the client\n`Proxy-Authorization` header is given. This command determines whether or not the\nrequest is authorized based on the \"exit code\" of the command.\n\nThe relevant request authentication information is passed in as\n`PROXY_AUTH_USERNAME`, `PROXY_AUTH_PASSWORD` and `PROXY_AUTH_SCHEME` environment\nvariables.\n\nFor example, to authorize \"Basic\" authentication with username \"foo\" and\npassword \"bar\":\n\n``` bash\n$ proxy --authenticate 'if \\\n    [ \"$PROXY_AUTH_USERNAME\" = \"foo\" ] && \\\n    [ \"$PROXY_AUTH_PASSWORD\" = \"bar\" ]; \\\n      then exit 0; \\\n    fi; \\\n    exit 1;'\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2013 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n[Squid]: http://www.squid-cache.org/\n[Privoxy]: http://www.privoxy.org/\n[Apache]: http://www.apache.org/\n[mod_proxy]: http://httpd.apache.org/docs/current/mod/mod_proxy.html\n","version":"0.2.3","publisher":{"name":"tootallnate","email":"nathan@tootallnate.net","url":null},"lastPublishedAt":"2015-03-03T02:25:17.905Z"},{"name":"on-headers","description":"Execute a listener when a response is about to write headers","readme":"# on-headers\n\n[![NPM Version](https://img.shields.io/npm/v/on-headers.svg?style=flat)](https://www.npmjs.org/package/on-headers)\n[![Node.js Version](https://img.shields.io/badge/node.js->=_0.8-blue.svg?style=flat)](http://nodejs.org/download/)\n[![Build Status](https://img.shields.io/travis/jshttp/on-headers.svg?style=flat)](https://travis-ci.org/jshttp/on-headers)\n[![Coverage Status](https://img.shields.io/coveralls/jshttp/on-headers.svg?style=flat)](https://coveralls.io/r/jshttp/on-headers)\n[![Gittip](https://img.shields.io/gittip/dougwilson.svg?style=flat)](https://www.gittip.com/dougwilson/)\n\nExecute a listener when a response is about to write headers.\n\n## Install\n\n```sh\n$ npm install on-headers\n```\n\n## API\n\n```js\nvar onHeaders = require('on-headers')\n```\n\n### onHeaders(res, listener)\n\nThis will add the listener `listener` to fire when headers are emitted for `res`.\nThe listener is passed the `response` object as it's context (`this`). Headers are\nconsidered to be emitted only once, right before they are sent to the client.\n\nWhen this is called multiple times on the same `res`, the `listener`s are fired\nin the reverse order they were added.\n\n## Examples\n\n```js\nvar http = require('http')\nvar onHeaders = require('on-headers')\n\nhttp\n.createServer(onRequest)\n.listen(3000)\n\nfunction addPoweredBy() {\n  // add if not set by end of request\n  if (!this.getHeader('X-Powered-By')) {\n    this.addHeader('X-Powered-By', 'Node.js')\n  }\n}\n\nfunction onRequest(req, res) {\n  onHeaders(res, addPoweredBy)\n\n  res.setHeader('Content-Type', 'text/plain')\n  res.end('hello!')\n}\n```\n\n## License\n\n[MIT](LICENSE)\n","version":"1.0.0","publisher":{"name":"dougwilson","email":"doug@somethingdoug.com","url":null},"lastPublishedAt":"2015-03-03T02:25:43.101Z"},{"name":"nipple","description":"HTTP Client Utilities","readme":"#This project has been renamed to [wreck](http://npmjs.org/package/wreck).  Please update your references and use the new package.\n\n\n![nipple Logo](https://raw.github.com/hapijs/nipple/master/images/nipple.png)\n\nHTTP Client Utilities\n\n[![Build Status](https://secure.travis-ci.org/hapijs/nipple.png)](http://travis-ci.org/hapijs/nipple)\n\nLead Maintainer: [Wyatt Preul](https://github.com/wpreul)\n\n## Usage\n### Basic\n```javascript\nvar Nipple = require('nipple');\n\nNipple.get('https://google.com/', function (err, res, payload) {\n    /* do stuff */\n});\n```\n\n### Advanced\n```javascript\nvar Nipple = require('nipple');\n\nvar method = 'GET'; // GET, POST, PUT, DELETE\nvar uri    = 'https://google.com/';\nvar readableStream = Nipple.toReadableStream('foo=bar');\n\n// all attributes are optional\nvar options = {\n    payload:   readableStream || 'foo=bar' || new Buffer('foo=bar'),\n    headers:   { /* http headers */ },\n    redirects: 3,\n    timeout:   1000,    // 1 second, default: unlimited\n    maxBytes:  1048576, // 1 MB, default: unlimited\n    rejectUnauthorized: true || false,\n    downstreamRes: null,\n    agent: null         // Node Core http.Agent\n};\n\nvar optionalCallback = function (err, res) {\n\n    // buffer the response stream\n    Nipple.read(res, function (err, body) {\n        /* do stuff */\n    });\n};\n\nNipple.request(method, uri, options, optionalCallback);\n```\n\n\n### `request(method, uri, [options], [callback])`\n\nInitiate an HTTP request.\n- `method` - A string specifying the HTTP request method, defaulting to 'GET'.\n- `uri` - The URI of the requested resource.\n- `options` - An optional configuration object with the following optional keys:\n    - `payload` - The request body as string, Buffer, or Readable Stream.\n    - `headers` - An object containing request headers.\n    - `rejectUnauthorized` - [TLS](http://nodejs.org/api/tls.html) flag indicating\n      whether the client should reject a response from a server with invalid certificates.\n    - `redirects` - The maximum number of redirects to follow.\n    - `agent` - Node Core [http.Agent](http://nodejs.org/api/http.html#http_class_http_agent).\n    - `timeout` - The number of milliseconds to wait without receiving a response\n    before aborting the request. Defaults to unlimited.\n- `callback` - The optional callback function using the signature `function (err, response)` where:\n    - `err` - Any error that may have occurred during the handling of the request.\n    - `response` - The [HTTP Incoming Message](http://nodejs.org/api/http.html#http_http_incomingmessage)\n       object, which is also a readable stream.\n\n### `read(response, [options], callback)`\n- `response` - An HTTP Incoming Message object.\n- `options` - An optional configuration object with the following optional keys:\n    - `timeout` - The number of milliseconds to wait while reading data before\n    aborting handling of the response. Defaults to unlimited.\n    - `json` - A flag indicating whether the payload should be parsed as JSON\n    if the response indicates a JSON content-type.\n    - `maxBytes` - The maximum allowed response payload size. Defaults to unlimited.\n- `callback` - The callback function using the signature `function (err, payload)` where:\n    - `err` - Any error that may have occurred while reading the response.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\n### `get(uri, [options], callback)`\n\nConvenience method for GET operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request.\n    - `response` - The [HTTP Incoming Message](http://nodejs.org/api/http.html#http_http_incomingmessage)\n       object, which is also a readable stream.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\n### `post(uri, [options], callback)`\n\nConvenience method for POST operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request.\n    - `response` - The [HTTP Incoming Message](http://nodejs.org/api/http.html#http_http_incomingmessage)\n       object, which is also a readable stream.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\n### `put(uri, [options], callback)`\n\nConvenience method for PUT operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request.\n    - `response` - The [HTTP Incoming Message](http://nodejs.org/api/http.html#http_http_incomingmessage)\n       object, which is also a readable stream.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\n### `delete(uri, [options], callback)`\n\nConvenience method for DELETE operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request.\n    - `response` - The [HTTP Incoming Message](http://nodejs.org/api/http.html#http_http_incomingmessage)\n       object, which is also a readable stream.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\n\n### `toReadableStream(payload, [encoding])`\n\nCreates a [readable stream](http://nodejs.org/api/stream.html#stream_class_stream_readable)\nfor the provided payload and encoding.\n- `payload` - The Buffer or string to be wrapped in a readable stream.\n- `encoding` - The encoding to use. Must be a valid Buffer encoding, such as 'utf8' or 'ascii'.\n\n```javascript\nvar stream = Nipple.toReadableStream(new Buffer('Hello', 'ascii'), 'ascii');\nvar read = stream.read();\n// read -> 'Hello'\n```\n\n### `parseCacheControl(field)`\n\nParses the provided *cache-control* request header value into an object containing\na property for each directive and it's value. Boolean directives, such as \"private\"\nor \"no-cache\" will be set to the boolean `true`.\n- `field` - The header cache control value to be parsed.\n\n```javascript\nvar  result = Nipple.parseCacheControl('private, max-age=0, no-cache');\n// result.private -> true\n// result['max-age'] -> 0\n// result['no-cache'] -> true\n```\n","version":"2.5.6","publisher":{"name":"wyatt","email":"wpreul@gmail.com","url":null},"lastPublishedAt":"2015-03-03T02:25:44.955Z"},{"name":"range-parser","description":"Range header field string parser","readme":"# range-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nRange header field parser.\n\n## Installation\n\n```\n$ npm install range-parser\n```\n\n## Examples\n\n```js\nassert(-1 == parse(200, 'bytes=500-20'));\nassert(-2 == parse(200, 'bytes=malformed'));\nparse(200, 'bytes=0-499').should.eql(arr('bytes', [{ start: 0, end: 199 }]));\nparse(1000, 'bytes=0-499').should.eql(arr('bytes', [{ start: 0, end: 499 }]));\nparse(1000, 'bytes=40-80').should.eql(arr('bytes', [{ start: 40, end: 80 }]));\nparse(1000, 'bytes=-500').should.eql(arr('bytes', [{ start: 500, end: 999 }]));\nparse(1000, 'bytes=-400').should.eql(arr('bytes', [{ start: 600, end: 999 }]));\nparse(1000, 'bytes=500-').should.eql(arr('bytes', [{ start: 500, end: 999 }]));\nparse(1000, 'bytes=400-').should.eql(arr('bytes', [{ start: 400, end: 999 }]));\nparse(1000, 'bytes=0-0').should.eql(arr('bytes', [{ start: 0, end: 0 }]));\nparse(1000, 'bytes=-1').should.eql(arr('bytes', [{ start: 999, end: 999 }]));\nparse(1000, 'items=0-5').should.eql(arr('items', [{ start: 0, end: 5 }]));\nparse(1000, 'bytes=40-80,-1').should.eql(arr('bytes', [{ start: 40, end: 80 }, { start: 999, end: 999 }]));\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/range-parser.svg?style=flat\n[npm-url]: https://npmjs.org/package/range-parser\n[node-version-image]: https://img.shields.io/badge/node.js-%3E%3D_0.6-brightgreen.svg?style=flat\n[node-version-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/jshttp/range-parser.svg?style=flat\n[travis-url]: https://travis-ci.org/jshttp/range-parser\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/range-parser.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/jshttp/range-parser\n[downloads-image]: https://img.shields.io/npm/dm/range-parser.svg?style=flat\n[downloads-url]: https://npmjs.org/package/range-parser\n","version":"1.0.2","publisher":{"name":"dougwilson","email":"doug@somethingdoug.com","url":null},"lastPublishedAt":"2015-03-03T02:25:58.292Z"},{"name":"forwarded","description":"Parse HTTP X-Forwarded-For header","readme":"# forwarded\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nParse HTTP X-Forwarded-For header\n\n## Installation\n\n```sh\n$ npm install forwarded\n```\n\n## API\n\n```js\nvar forwarded = require('forwarded')\n```\n\n### forwarded(req)\n\n```js\nvar addresses = forwarded(req)\n```\n\nParse the `X-Forwarded-For` header from the request. Returns an array\nof the addresses, including the socket address for the `req`. In reverse\norder (i.e. index `0` is the socket address and the last index is the\nfurthest address, typically the end-user).\n\n## Testing\n\n```sh\n$ npm test\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/forwarded.svg?style=flat\n[npm-url]: https://npmjs.org/package/forwarded\n[node-version-image]: https://img.shields.io/node/v/forwarded.svg?style=flat\n[node-version-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/jshttp/forwarded.svg?style=flat\n[travis-url]: https://travis-ci.org/jshttp/forwarded\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/forwarded.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/jshttp/forwarded?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/forwarded.svg?style=flat\n[downloads-url]: https://npmjs.org/package/forwarded\n","version":"0.1.0","publisher":{"name":"dougwilson","email":"doug@somethingdoug.com","url":null},"lastPublishedAt":"2015-03-03T02:26:07.483Z"}],"offset":12,"hasMore":true}