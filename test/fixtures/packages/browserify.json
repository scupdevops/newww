{"versions":["0.0.1","0.0.2","0.0.3","0.0.4","0.0.5","0.1.0","0.1.1","0.1.2","0.1.3","0.1.4","0.1.5","0.2.0","0.2.1","0.2.10","0.2.11","0.2.2","0.2.3","0.2.4","0.2.5","0.2.6","0.2.7","0.2.8","0.2.9","0.3.0","0.3.1","0.3.2","0.3.3","0.3.4","0.3.5","0.3.6","0.3.7","0.4.0","0.4.1","0.4.10","0.4.11","0.4.12","0.4.13","0.4.14","0.4.15","0.4.2","0.4.3","0.4.4","0.4.5","0.4.6","0.4.7","0.4.8","0.4.9","0.5.0","0.5.1","0.5.2","1.0.0","1.1.0","1.10.0","1.10.1","1.10.11","1.10.12","1.10.13","1.10.14","1.10.15","1.10.16","1.10.17","1.10.2","1.10.3","1.10.4","1.10.5","1.10.6","1.10.7","1.10.8","1.10.9","1.1.1","1.11.0","1.11.1","1.1.2","1.12.0","1.12.1","1.12.2","1.12.3","1.1.3","1.13.0","1.13.1","1.13.10","1.13.2","1.13.3","1.13.4","1.13.5","1.13.6","1.13.8","1.13.9","1.1.4","1.14.0","1.14.1","1.14.2","1.14.3","1.14.4","1.14.5","1.15.0","1.15.1","1.15.2","1.15.3","1.15.4","1.15.5","1.15.6","1.16.0","1.16.1","1.16.2","1.16.3","1.16.4","1.16.5","1.16.6","1.16.7","1.16.8","1.17.0","1.17.1","1.17.2","1.17.3","1.18.0","1.2.0","1.2.1","1.2.2","1.2.3","1.2.4","1.2.5","1.2.6","1.2.7","1.2.8","1.2.9","1.3.0","1.4.0","1.4.1","1.4.2","1.4.3","1.4.4","1.4.5","1.4.6","1.4.7","1.4.8","1.5.0","1.6.0","1.6.1","1.7.0","1.7.1","1.7.2","1.7.3","1.7.4","1.7.5","1.7.6","1.7.7","1.8.0","1.8.1","1.8.2","1.8.3","1.9.0","1.9.1","1.9.2","1.9.3","1.9.4","2.0.0","2.0.1","2.1.0","2.10.0","2.10.1","2.10.2","2.11.0","2.12.0","2.12.1","2.12.2","2.12.3","2.12.4","2.12.5","2.13.0","2.13.1","2.13.2","2.13.3","2.14.0","2.14.1","2.14.2","2.15.0","2.16.0","2.17.0","2.17.1","2.17.2","2.17.3","2.17.4","2.18.0","2.18.1","2.19.0","2.2.0","2.20.0","2.20.1","2.20.2","2.2.1","2.21.0","2.2.2","2.22.0","2.2.3","2.23.0","2.23.1","2.2.4","2.24.0","2.24.1","2.24.2","2.24.3","2.2.5","2.25.0","2.25.1","2.2.6","2.26.0","2.27.0","2.27.1","2.28.0","2.29.0","2.29.1","2.3.0","2.30.0","2.3.1","2.31.0","2.32.0","2.32.1","2.32.2","2.32.3","2.32.4","2.33.0","2.33.1","2.34.0","2.34.1","2.34.2","2.34.3","2.35.0","2.35.1","2.35.2","2.35.3","2.35.4","2.36.0","2.36.1","2.4.0","2.4.1","2.4.2","2.4.3","2.5.0","2.5.1","2.6.0","2.6.1","2.7.0","2.7.1","2.7.2","2.7.3","2.7.4","2.8.0","2.8.1","2.9.0","3.0.0","3.1.0","3.10.0","3.1.1","3.11.0","3.11.1","3.1.2","3.12.0","3.1.3","3.13.0","3.14.0","3.14.1","3.16.0","3.16.1","3.17.0","3.18.0","3.19.0","3.19.1","3.2.0","3.20.0","3.20.1","3.20.2","3.2.1","3.21.0","3.21.1","3.2.2","3.22.0","3.22.1","3.23.0","3.23.1","3.24.0","3.24.1","3.24.10","3.24.11","3.24.13","3.24.2","3.24.3","3.24.4","3.24.5","3.24.6","3.24.7","3.24.8","3.24.9","3.25.0","3.25.1","3.25.2","3.26.0","3.27.0","3.27.1","3.28.0","3.28.1","3.28.2","3.29.0","3.29.1","3.3.0","3.30.0","3.30.1","3.30.2","3.30.3","3.30.4","3.31.0","3.31.1","3.31.2","3.32.0","3.32.1","3.33.0","3.33.1","3.34.0","3.35.0","3.36.0","3.36.1","3.37.0","3.37.1","3.37.2","3.38.0","3.38.1","3.39.0","3.4.0","3.40.0","3.40.1","3.40.2","3.40.3","3.40.4","3.4.1","3.41.0","3.42.0","3.43.0","3.44.0","3.44.1","3.44.2","3.45.0","3.46.0","3.46.1","3.5.0","3.6.0","3.7.0","3.8.0","3.8.1","3.9.0","3.9.1","4.0.0","4.1.0","4.1.1","4.1.10","4.1.11","4.1.2","4.1.3","4.1.4","4.1.5","4.1.6","4.1.7","4.1.8","4.1.9","4.2.0","4.2.1","4.2.2","4.2.3","5.0.0","5.0.1","5.0.2","5.0.3","5.0.4","5.0.5","5.0.6","5.0.7","5.0.8","5.1.0","5.10.0","5.10.1","5.1.1","5.11.0","5.11.1","5.11.2","5.12.0","5.12.1","5.12.2","5.13.0","5.13.1","5.2.0","5.2.1","5.3.0","5.4.0","5.4.1","5.4.2","5.5.0","5.6.0","5.6.1","5.7.0","5.8.0","5.9.0","5.9.1","5.9.2","5.9.3","6.0.0","6.0.1","6.0.2","6.0.3","6.1.0","6.1.1","6.1.2","6.2.0","6.3.0","6.3.1","6.3.2","6.3.3","6.3.4","7.0.0","7.0.1","7.0.2","7.0.3","7.1.0","8.0.0","8.0.1","8.0.2","8.0.3","8.1.0","8.1.1","8.1.2","8.1.3","9.0.0","9.0.1","9.0.2","9.0.3"],"name":"browserify","description":"browser-side require() the node way","readme":"# browserify\n\n`require('modules')` in the browser\n\nUse a [node](http://nodejs.org)-style `require()` to organize your browser code\nand load modules installed by [npm](https://npmjs.org).\n\nbrowserify will recursively analyze all the `require()` calls in your app in\norder to build a bundle you can serve up to the browser in a single `<script>`\ntag.\n\n[![build status](https://secure.travis-ci.org/substack/node-browserify.png)](http://travis-ci.org/substack/node-browserify)\n\n![browserify!](http://substack.net/images/browserify_logo.png)\n\n# getting started\n\nIf you're new to browserify, check out the\n[browserify handbook](https://github.com/substack/browserify-handbook)\nand the resources on [browserify.org](http://browserify.org/).\n\nCheck out [browserify search](http://browserifysearch.org/) to find\nbrowserify-compatible packages on npm.\n\n# example\n\nWhip up a file, `main.js` with some `require()`s in it. You can use relative\npaths like `'./foo.js'` and `'../lib/bar.js'` or module paths like `'gamma'`\nthat will search `node_modules/` using\n[node's module lookup algorithm](https://github.com/substack/node-resolve).\n\n``` js\nvar foo = require('./foo.js');\nvar bar = require('../lib/bar.js');\nvar gamma = require('gamma');\n\nvar elem = document.getElementById('result');\nvar x = foo(100) + bar('baz');\nelem.textContent = gamma(x);\n```\n\nExport functionality by assigning onto `module.exports` or `exports`:\n\n``` js\nmodule.exports = function (n) { return n * 111 }\n```\n\nNow just use the `browserify` command to build a bundle starting at `main.js`:\n\n```\n$ browserify main.js > bundle.js\n```\n\nAll of the modules that `main.js` needs are included in the `bundle.js` from a\nrecursive walk of the `require()` graph using\n[required](https://github.com/defunctzombie/node-required).\n\nTo use this bundle, just toss a `<script src=\"bundle.js\"></script>` into your\nhtml!\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install -g browserify\n```\n\n# usage\n\n```\nUsage: browserify [entry files] {OPTIONS}\n\nStandard Options:\n\n    --outfile, -o  Write the browserify bundle to this file.\n                   If unspecified, browserify prints to stdout.\n\n    --require, -r  A module name or file to bundle.require()\n                   Optionally use a colon separator to set the target.\n\n      --entry, -e  An entry point of your app\n  \n     --ignore, -i  Replace a file with an empty stub. Files can be globs.\n \n    --exclude, -u  Omit a file from the output bundle. Files can be globs.\n\n   --external, -x  Reference a file from another bundle. Files can be globs.\n  \n  --transform, -t  Use a transform module on top-level files.\n \n    --command, -c  Use a transform command on top-level files.\n   \n  --standalone -s  Generate a UMD bundle for the supplied export name.\n                   This bundle works with other module systems and sets the name\n                   given as a window global if no module system is found.\n  \n       --debug -d  Enable source maps that allow you to debug your files\n                   separately.\n\n       --help, -h  Show this message\n\nFor advanced options, type `browserify --help advanced`.\n\nSpecify a parameter.\n```\n\n```\nAdvanced Options:\n\n  --insert-globals, --ig, --fast    [default: false]\n\n    Skip detection and always insert definitions for process, global,\n    __filename, and __dirname.\n                  \n    benefit: faster builds\n    cost: extra bytes\n \n  --insert-global-vars, --igv\n\n    Comma-separated list of global variables to detect and define.\n    Default: __filename,__dirname,process,Buffer,global\n \n  --detect-globals, --dg            [default: true]\n\n    Detect the presence of process, global, __filename, and __dirname and define\n    these values when present.\n\n    benefit: npm modules more likely to work\n    cost: slower builds\n\n  --ignore-missing, --im            [default: false]\n\n    Ignore `require()` statements that don't resolve to anything.\n\n  --noparse=FILE\n\n    Don't parse FILE at all. This will make bundling much, much faster for giant\n    libs like jquery or threejs.\n\n  --no-builtins\n\n    Turn off builtins. This is handy when you want to run a bundle in node which\n    provides the core builtins.\n\n  --no-commondir\n \n    Turn off setting a commondir. This is useful if you want to preserve the\n    original paths that a bundle was generated with. \n \n  --no-bundle-external\n\n    Turn off bundling of all external modules. This is useful if you only want\n    to bundle your local files.\n\n  --bare \n\n    Alias for both --no-builtins, --no-commondir, and sets --insert-global-vars\n    to just \"__filename,__dirname\". This is handy if you want to run bundles in\n    node.\n\n  --full-paths\n\n    Turn off converting module ids into numerical indexes. This is useful for\n    preserving the original paths that a bundle was generated with.\n\n  --deps\n  \n    Instead of standard bundle output, print the dependency array generated by\n    module-deps.\n\n  --list\n \n    Print each file in the dependency graph. Useful for makefiles.\n\n  --extension=EXTENSION\n\n    Consider files with specified EXTENSION as modules, this option can used\n    multiple times.\n\n  --ignore-transform=MODULE, --it MODULE\n\n    Any transforms matching the given name will be ignored, including\n    those in your module dependencies. \n\n  --global-transform=MODULE, -g MODULE\n\n    Use a transform module on all files after any ordinary transforms have run.\n\n  --plugin=MODULE, -p MODULE\n\n    Register MODULE as a plugin.\n\nPassing arguments to transforms and plugins:\n\n  For -t, -g, and -p, you may use subarg syntax to pass options to the\n  transforms or plugin function as the second parameter. For example:\n\n    -t [ foo -x 3 --beep ]\n\n  will call the `foo` transform for each applicable file by calling:\n\n    foo(file, { x: 3, beep: true })\n\n```\n\n# compatibility\n\nMany [npm](http://npmjs.org) modules that don't do IO will just work after being\nbrowserified. Others take more work.\n\nMany node built-in modules have been wrapped to work in the browser, but only\nwhen you explicitly `require()` or use their functionality.\n\nWhen you `require()` any of these modules, you will get a browser-specific shim:\n\n* [assert](https://npmjs.org/package/assert)\n* [buffer](https://npmjs.org/package/buffer)\n* [console](https://npmjs.org/package/console-browserify)\n* [constants](https://npmjs.org/package/constants-browserify)\n* [crypto](https://npmjs.org/package/crypto-browserify)\n* [domain](https://npmjs.org/package/domain-browser)\n* [events](https://npmjs.org/package/events-browserify)\n* [http](https://npmjs.org/package/http-browserify)\n* [https](https://npmjs.org/package/https-browserify)\n* [os](https://npmjs.org/package/os-browserify)\n* [path](https://npmjs.org/package/path-browserify)\n* [punycode](https://npmjs.org/package/punycode)\n* [querystring](https://npmjs.org/package/querystring)\n* [stream](https://npmjs.org/package/stream-browserify)\n* [string_decoder](https://npmjs.org/package/string_decoder)\n* [timers](https://npmjs.org/package/timers-browserify)\n* [tty](https://npmjs.org/package/tty-browserify)\n* [url](https://npmjs.org/package/url)\n* [util](https://npmjs.org/package/util)\n* [vm](https://npmjs.org/package/vm-browserify)\n* [zlib](https://npmjs.org/package/browserify-zlib)\n\nAdditionally, if you use any of these variables, they\n[will be defined](https://github.com/substack/insert-module-globals)\nin the bundled output in a browser-appropriate way:\n\n* [process](https://npmjs.org/package/process)\n* [Buffer](https://npmjs.org/package/buffer)\n* global - top-level scope object (window)\n* __filename - file path of the currently executing file\n* __dirname - directory path of the currently executing file\n\n# more examples\n\n## external requires\n\nYou can just as easily create a bundle that will export a `require()` function so\nyou can `require()` modules from another script tag. Here we'll create a\n`bundle.js` with the [through](https://npmjs.org/package/through)\nand [duplexer](https://npmjs.org/package/duplexer) modules.\n\n```\n$ browserify -r through -r duplexer -r ./my-file.js:my-module > bundle.js\n```\n\nThen in your page you can do:\n\n``` html\n<script src=\"bundle.js\"></script>\n<script>\n  var through = require('through');\n  var duplexer = require('duplexer');\n  var myModule = require('my-module');\n  /* ... */\n</script>\n```\n\n## external source maps\n\nIf you prefer the source maps be saved to a separate `.js.map` source map file, you may use\n[exorcist](https://github.com/thlorenz/exorcist) in order to achieve that. It's as simple as:\n\n```\n$ browserify main.js --debug | exorcist bundle.js.map > bundle.js \n```\n\nLearn about additional options [here](https://github.com/thlorenz/exorcist#usage).\n\n## multiple bundles\n\nIf browserify finds a `require`d function already defined in the page scope, it\nwill fall back to that function if it didn't find any matches in its own set of\nbundled modules.\n\nIn this way, you can use browserify to split up bundles among multiple pages to\nget the benefit of caching for shared, infrequently-changing modules, while\nstill being able to use `require()`. Just use a combination of `--external` and\n`--require` to factor out common dependencies.\n\nFor example, if a website with 2 pages, `beep.js`:\n\n``` js\nvar robot = require('./robot.js');\nconsole.log(robot('beep'));\n```\n\nand `boop.js`:\n\n``` js\nvar robot = require('./robot.js');\nconsole.log(robot('boop'));\n```\n\nboth depend on `robot.js`:\n\n``` js\nmodule.exports = function (s) { return s.toUpperCase() + '!' };\n```\n\n```\n$ browserify -r ./robot.js > static/common.js\n$ browserify -x ./robot.js beep.js > static/beep.js\n$ browserify -x ./robot.js boop.js > static/boop.js\n```\n\nThen on the beep page you can have:\n\n``` html\n<script src=\"common.js\"></script>\n<script src=\"beep.js\"></script>\n```\n\nwhile the boop page can have:\n\n``` html\n<script src=\"common.js\"></script>\n<script src=\"boop.js\"></script>\n```\n\nThis approach using `-r` and `-x` works fine for a small number of split assets,\nbut there are plugins for automatically factoring out components which are\ndescribed in the\n[partitioning section of the browserify handbook](https://github.com/substack/browserify-handbook#partitioning).\n\n## api example\n\nYou can use the API directly too:\n\n``` js\nvar browserify = require('browserify');\nvar b = browserify();\nb.add('./browser/main.js');\nb.bundle().pipe(process.stdout);\n```\n\n# methods\n\n``` js\nvar browserify = require('browserify')\n```\n\n## var b = browserify(files=[] or opts={})\n\nCreate a browserify instance `b` from the entry main `files` or `opts.entries`.\n`files` can be an array of files or a single file.\n\nFor each `file` in `files`, if `file` is a stream, its contents will be used.\nYou should use `opts.basedir` when using streaming files so that relative\nrequires will know where to resolve from.\n\n`opts.noParse` is an array which will skip all require() and global parsing for\neach file in the array. Use this for giant libs like jquery or threejs that\ndon't have any requires or node-style globals but take forever to parse.\n\n`opts.extensions` is an array of optional extra extensions for the module lookup\nmachinery to use when the extension has not been specified.\nBy default browserify considers only `.js` and `.json` files in such cases.\n\n`opts.basedir` is the directory that browserify starts bundling from for\nfilenames that start with `.`.\n\n`opts.commondir` sets the algorithm used to parse out the common paths. Use\n`false` to turn this off, otherwise it uses the\n[commondir](https://npmjs.org/package/commondir) module.\n\n`opts.fullPaths` disables converting module ids into numerical indexes. This is\nuseful for preserving the original paths that a bundle was generated with.\n\n`opts.builtins` sets the list of built-ins to use, which by default is set in\n`lib/builtins.js` in this distribution.\n\n`opts.bundleExternal` boolean option to set if external modules should be\nbundled. Defaults to true.\n\nWhen `opts.insertGlobals` is true, always insert `process`, `global`,\n`__filename`, and `__dirname` without analyzing the AST for faster builds but\nlarger output bundles. Default false.\n\nWhen `opts.detectGlobals` is true, scan all files for `process`, `global`,\n`__filename`, and `__dirname`, defining as necessary. With this option npm\nmodules are more likely to work but bundling takes longer. Default true.\n\nWhen `opts.debug` is true, add a source map inline to the end of the bundle.\nThis makes debugging easier because you can see all the original files if\nyou are in a modern enough browser.\n\nWhen `opts.standalone` is a non-empty string, a standalone module is created\nwith that name and a [umd](https://github.com/forbeslindesay/umd) wrapper.\nYou can use namespaces in the standalone global export using a `.` in the string\nname as a separator. For example: `'A.B.C'` \n\nNote that in standalone mode the `require()` calls from the original source will\nstill be around, which may trip up AMD loaders scanning for `require()` calls.\nYou can remove these calls with\n[derequire](https://npmjs.org/package/derequire):\n\n```\n$ npm install -g derequire\n$ browserify main.js --standalone Foo | derequire > bundle.js\n```\n\n`opts.insertGlobalVars` will be passed to\n[insert-module-globals](http://npmjs.org/package/insert-module-globals)\nas the `opts.vars` parameter.\n\n`opts.externalRequireName` defaults to `'require'` in `expose` mode but you can\nuse another name.\n\nNote that if files do not contain javascript source code then you also need to\nspecify a corresponding transform for them.\n\nAll other options are forwarded along to\n[module-deps](https://npmjs.org/package/module-deps)\nand [browser-pack](https://npmjs.org/package/browser-pack) directly.\n\n## b.add(file, opts)\n\nAdd an entry file from `file` that will be executed when the bundle loads.\n\nIf `file` is an array, each item in `file` will be added as an entry file.\n\n## b.require(file, opts)\n\nMake `file` available from outside the bundle with `require(file)`.\n\nThe `file` param is anything that can be resolved by `require.resolve()`.\n\n`file` can also be a stream, but you should also use `opts.basedir` so that\nrelative requires will be resolvable.\n\nIf `file` is an array, each item in `file` will be required.\nIn `file` array form, you can use a string or object for each item. Object items\nshould have a `file` property and the rest of the parameters will be used for\nthe `opts`.\n\nUse the `expose` property of opts to specify a custom dependency name. \n`require('./vendor/angular/angular.js', {expose: 'angular'})` enables `require('angular')`\n\n## b.bundle(cb)\n\nBundle the files and their dependencies into a single javascript file.\n\nReturn a readable stream with the javascript file contents or\noptionally specify a `cb(err, buf)` to get the buffered results.\n\n## b.external(file)\n\nPrevent `file` from being loaded into the current bundle, instead referencing\nfrom another bundle.\n\nIf `file` is an array, each item in `file` will be externalized.\n\nIf `file` is another bundle, that bundle's contents will be read and excluded\nfrom the current bundle as the bundle in `file` gets bundled.\n\n## b.ignore(file)\n\nPrevent the module name or file at `file` from showing up in the output bundle.\n\nInstead you will get a file with `module.exports = {}`.\n\n## b.exclude(file)\n\nPrevent the module name or file at `file` from showing up in the output bundle.\n\nIf your code tries to `require()` that file it will throw unless you've provided\nanother mechanism for loading it.\n\n## b.transform(tr, opts={})\n\nTransform source code before parsing it for `require()` calls with the transform\nfunction or module name `tr`.\n\nIf `tr` is a function, it will be called with `tr(file)` and it should return a\n[through-stream](https://github.com/substack/stream-handbook#through)\nthat takes the raw file contents and produces the transformed source.\n\nIf `tr` is a string, it should be a module name or file path of a\n[transform module](https://github.com/substack/module-deps#transforms)\nwith a signature of:\n\n``` js\nvar through = require('through');\nmodule.exports = function (file) { return through() };\n```\n\nYou don't need to necessarily use the\n[through](https://npmjs.org/package/through) module. Browserify is compatible with the newer, more verbose [Transform streams](http://nodejs.org/api/stream.html#stream_class_stream_transform_1) built into Node v0.10.\n\nHere's how you might compile coffee script on the fly using `.transform()`:\n\n``` js\nvar coffee = require('coffee-script');\nvar through = require('through');\n\nb.transform(function (file) {\n    var data = '';\n    return through(write, end);\n    \n    function write (buf) { data += buf }\n    function end () {\n        this.queue(coffee.compile(data));\n        this.queue(null);\n    }\n});\n```\n\nNote that on the command-line with the `-c` flag you can just do:\n\n```\n$ browserify -c 'coffee -sc' main.coffee > bundle.js\n```\n\nOr better still, use the [coffeeify](https://github.com/jnordberg/coffeeify)\nmodule:\n\n```\n$ npm install coffeeify\n$ browserify -t coffeeify main.coffee > bundle.js\n```\n\nIf `opts.global` is `true`, the transform will operate on ALL files, despite\nwhether they exist up a level in a `node_modules/` directory. Use global\ntransforms cautiously and sparingly, since most of the time an ordinary\ntransform will suffice. You can also not configure global transforms in a\n`package.json` like you can with ordinary transforms.\n\nGlobal transforms always run after any ordinary transforms have run.\n\nTransforms may obtain options from the command-line with\n[subarg](https://npmjs.org/package/subarg) syntax:\n\n```\n$ browserify -t [ foo --bar=555 ] main.js\n```\n\nor from the api:\n\n```\nb.transform('foo', { bar: 555 })\n```\n\nIn both cases, these options are provided as the second argument to the\ntransform function:\n\n```\nmodule.exports = function (file, opts) { /* opts.bar === 555 */ }\n```\n\nOptions sent to the browserify constructor are also provided under\n`opts._flags`. These browserify options are sometimes required if your transform\nneeds to do something different when browserify is run in debug mode, for\nexample.\n\n## b.plugin(plugin, opts)\n\nRegister a `plugin` with `opts`. Plugins can be a string module name or a\nfunction the same as transforms.\n\n`plugin(b, opts)` is called with the browserify instance `b`.\n\nFor more information, consult the plugins section below.\n\n## b.pipeline\n\nThere is an internal\n[labeled-stream-splicer](https://npmjs.org/package/labeled-stream-splicer)\npipeline with these labels:\n\n* `'record'` - save inputs to play back later on subsequent `bundle()` calls\n* `'deps'` - [module-deps](https://npmjs.org/package/module-deps)\n* `'json'` - adds `module.exports=` to the beginning of json files\n* `'unbom'` - remove byte-order markers\n* `'unshebang'` - remove #! labels on the first line\n* `'syntax'` - check for syntax errors\n* `'sort'` - sort the dependencies for deterministic bundles\n* `'dedupe'` - remove duplicate source contents\n* `'label'` - apply integer labels to files\n* `'emit-deps'` - emit `'dep'` event\n* `'debug'` - apply source maps\n* `'pack'` - [browser-pack](https://npmjs.org/package/browser-pack)\n* `'wrap'` - apply final wrapping, `require=` and a newline and semicolon\n\nYou can call `b.get()` with a label name to get a handle on a stream pipeline\nthat you can `push()`, `unshift()`, or `splice()` to insert your own transform\nstreams.\n\n# b.reset(opts)\n\nReset the pipeline back to a normal state. This function is called automatically\nwhen `bundle()` is called multiple times.\n\nThis function triggers a 'reset' event.\n\n# package.json\n\nbrowserify uses the `package.json` in its module resolution algorithm, just like\nnode. If there is a `\"main\"` field, browserify will start resolving the package\nat that point. If there is no `\"main\"` field, browserify will look for an\n`\"index.js\"` file in the module root directory. Here are some more\nsophisticated things you can do in the package.json:\n\n## browser field\n\nThere is a special \"[browser](https://gist.github.com/4339901)\" field you can\nset in your package.json on a per-module basis to override file resolution for\nbrowser-specific versions of files.\n\nFor example, if you want to have a browser-specific module entry point for your\n`\"main\"` field you can just set the `\"browser\"` field to a string:\n\n``` json\n\"browser\": \"./browser.js\"\n```\n\nor you can have overrides on a per-file basis:\n\n``` json\n\"browser\": {\n  \"fs\": \"level-fs\",\n  \"./lib/ops.js\": \"./browser/opts.js\"\n}\n```\n\nNote that the browser field only applies to files in the local module, and like\ntransforms, it doesn't apply into `node_modules` directories.\n\n## browserify.transform\n\nYou can specify source transforms in the package.json in the\n`browserify.transform` field. There is more information about how source\ntransforms work in package.json on the\n[module-deps readme](https://github.com/substack/module-deps#transforms).\n\nFor example, if your module requires [brfs](https://npmjs.org/package/brfs), you\ncan add\n\n``` json\n\"browserify\": { \"transform\": [ \"brfs\" ] }\n```\n\nto your package.json. Now when somebody `require()`s your module, brfs will\nautomatically be applied to the files in your module without explicit\nintervention by the person using your module. Make sure to add transforms to\nyour package.json dependencies field.\n\n# events\n\n## b.on('file', function (file, id, parent) {})\n## b.pipeline.on('file', function (file, id, parent) {})\n\nWhen a file is resolved for the bundle, the bundle emits a `'file'` event with\nthe full `file` path, the `id` string passed to `require()`, and the `parent`\nobject used by\n[browser-resolve](https://github.com/defunctzombie/node-browser-resolve).\n\nYou could use the `file` event to implement a file watcher to regenerate bundles\nwhen files change.\n\n## b.on('package', function (pkg) {})\n## b.pipeline.on('package', function (pkg) {})\n\nWhen a package file is read, this event fires with the contents. The package\ndirectory is available at `pkg.__dirname`.\n\n## b.on('bundle', function (bundle) {})\n\nWhen `.bundle()` is called, this event fires with the `bundle` output stream.\n\n## b.on('reset', function () {})\n\nWhen the `.reset()` method is called or implicitly called by another call to\n`.bundle()`, this event fires.\n\n## b.on('transform', function (tr, file) {})\n## b.pipeline.on('transform', function (tr, file) {})\n\nWhen a transform is applied to a file, the `'transform'` event fires on the\nbundle stream with the transform stream `tr` and the `file` that the transform\nis being applied to.\n\n# plugins\n\nFor some more advanced use-cases, a transform is not sufficiently extensible.\nPlugins are modules that take the bundle instance as their first parameter and\nan option hash as their second.\n\nPlugins can be used to do perform some fancy features that transforms can't do.\nFor example, [factor-bundle](https://npmjs.org/package/factor-bundle) is a\nplugin that can factor out common dependencies from multiple entry-points into a\ncommon bundle. Use plugins with `-p` and pass options to plugins with\n[subarg](https://npmjs.org/package/subarg) syntax:\n\n```\nbrowserify x.js y.js -p [ factor-bundle -o bundle/x.js -o bundle/y.js ] \\\n  > bundle/common.js\n```\n\nFor a list of plugins, consult the\n[browserify-plugin tag](https://npmjs.org/browse/keyword/browserify-plugin)\non npm.\n\n# list of source transforms\n\nThere is a [wiki page that lists the known browserify\ntransforms](https://github.com/substack/node-browserify/wiki/list-of-transforms).\n\nIf you write a transform, make sure to add your transform to that wiki page and\nadd a package.json keyword of `browserify-transform` so that\n[people can browse for all the browserify\ntransforms](https://npmjs.org/browse/keyword/browserify-transform) on npmjs.org.\n\n# third-party tools\n\nThere is a [wiki page that lists the known browserify\ntools](https://github.com/substack/node-browserify/wiki/browserify-tools).\n\nIf you write a tool, make sure to add it to that wiki page and\nadd a package.json keyword of `browserify-tool` so that\n[people can browse for all the browserify\ntools](https://npmjs.org/browse/keyword/browserify-tool) on npmjs.org.\n\n# changelog\n\nReleases are documented in\n[changelog.markdown](changelog.markdown) and on the\n[browserify twitter feed](https://twitter.com/browserify).\n\n# license\n\nMIT\n\n![browserify!](http://substack.net/images/browserify/browserify.png)\n","stars":["21xhipster","6174","9joneg","adambyrne","adrian.arroyocalle","ae","af","agtlucas","ahmedelgabri","aiham","akiva","alanshaw","alexandergugel","alexandermac","alexdickson","allthingssmitty","alphavibe","amiorin","andruwhart","anmol1771","antiokus314","antouank","arthas","artskydj","asawq2006","atomstrom","axelav","barenko","bat","bausmeier","bclinkinbeard","bcoe","bengourley","benittes","benjaminverble","beth_rogers465","bezoerb","binnng","bmpvieira","borjes","brad426","branislav","brecht","cameronjroe","cannobbio","capaj","cedx","centur","cfleschhut","charlespeters","chengmu","chesleybrown","christianseel","christianv","chroder","cilindrox","claveren","codematix","coderaiser","colingourlay","conradz","corintho","coverslide","csbun","dannyfritz","davidchase","davidrlee","dbrockman","dechowmedia","deide","denisix","dgarlitt","dimitriwalters","dizlexik","djk","dodo","dominictarr","dongxu","dr-benton","drudge","dstokes","efleming969","eliasgs","esessoms","evanhahn","evkline","fantasyshao","fdaciuk","feross","fgribreau","fgvutn","forbeslindesay","frknbasaran","funroll","gazzwi86","gbabula","gillesruppert","gloddy","goblindegook","gokulkrishh","gonzalofj","goodseller","greelgorke","gregoryteach","guumaster","hagb4rd","hallaji","hanifbbz","hayzem","hughsk","icflorescu","iisii","imanu","indigo0086","io2work","isaacs","itonyyo","ivangaravito","j0n","jamescostian","jameskyburz","jayproulx","jbdelhommeau","jkimbo","joaocunha","joeybaker","johno","joliva","jonniespratley","jostw","jpsirois","jream","julienrbt","justinjmoses","jxson","kabomi","kastor","kenjisan4u","kenlimmj","kewah","klarence1","kmck","koma75","kulakowka","kwizzn","langri-sha","leesei","leodutra","leonardorb","leonning","lichenhao","louxiaojian","lucian.lature","luk","majj","maratyszcza","markthethomas","mastayoda","mathieuancelin","maxidev","melvingruesbeck","mgesmundo","mhaidarh","mikolalysenko","minimit","mmckegg","morishitter","mubaidr","mykhael","nadimix","nak2k","naokie","nickleefly","nitayneeman","nlh101","nmrony","nodejs-osaka","noopkat","novo","nrn","olls","orion-","oroce","ovjang","parmentf","parroit","pedrofelipe","pid","pillar0514","pnevares","pobrien","prabhash1785","pragmadash","prisme","psalaets","pvalentim","pvorb","raulb","rbartoli","rebugger","rgraves90","rhodesjason","risyasin","rodenis","romainberger","rrbiten","ruchirgodura","ruiquelhas","ryanj","sahilsk","sbruchmann","scamden","scottdejonge","scott_joe","scotttesler","season19840122","sergeyg","servicesolahart","shakakira","shatting","shieldax","shiroari","shoobah","shtylman","shyamguth","sigod","simplyianm","sirreal","sobering","soldair","sroccaserra","ssebastianj","stany","stooboo","stringhq","stuligan","sunnylost","suziam","swx","tangiblej","tellnes","temasm","thomas-jensen","thomask33","thrashr888","tjwebb","tmaximini","tmpvar","tonyseek","toogle","topcloud","vchouhan","vincentmac","visormatt","wambulance","wangwen1220","wayneashleyberry","wenbing","willhoag","wlabranche","wxnet","xavierharrell","ximex","yaniv"],"bugs":null,"global":false,"repository":{"type":"git","url":"http://github.com/substack/node-browserify.git"},"dependencies":{"xtend":"^3.0.0","vm-browserify":"~0.0.1","util":"~0.10.1","url":"~0.10.1","tty-browserify":"~0.0.0","timers-browserify":"^1.0.1","through2":"^1.0.0","syntax-error":"^1.1.1","subarg":"^1.0.0","string_decoder":"~0.10.0","stream-browserify":"^1.0.0","shell-quote":"~0.0.1","shasum":"^1.0.0","shallow-copy":"0.0.1","resolve":"^1.1.4","readable-stream":"^1.1.13","querystring-es3":"~0.2.0","punycode":"~1.2.3","process":"^0.10.0","path-browserify":"~0.0.0","parents":"^1.0.1","os-browserify":"~0.1.1","module-deps":"^3.7.0","labeled-stream-splicer":"^1.0.0","isarray":"0.0.1","insert-module-globals":"^6.2.0","inherits":"~2.0.1","https-browserify":"~0.0.0","http-browserify":"^1.4.0","has":"^1.0.0","glob":"^4.0.5","events":"~1.0.0","duplexer2":"~0.0.2","domain-browser":"~1.1.0","deps-sort":"^1.3.5","defined":"~0.0.0","deep-equal":"^1.0.0","crypto-browserify":"^3.0.0","constants-browserify":"~0.0.1","console-browserify":"^1.1.0","concat-stream":"~1.4.1","commondir":"0.0.1","builtins":"~0.0.3","buffer":"^3.0.0","browserify-zlib":"~0.1.2","browser-resolve":"^1.7.1","browser-pack":"^4.0.0","assert":"~1.3.0","JSONStream":"~0.10.0"},"keywords":["javascript","npm","bundle","commonj-esque","commonjs","require","browser"],"devDependencies":{"through":"^2.3.4","tap":"~0.4.0","seq":"0.3.3","osenv":"^0.1.0","mkdirp":"~0.3.3","es6ify":"~0.4.8","coffeeify":"~0.6.0","coffee-script":"~1.5.0","browser-unpack":"~0.0.0","backbone":"~0.9.2"},"publisher":{"name":"substack","email":"mail@substack.net","url":null},"maintainers":[{"name":"feross","email":"feross@feross.org"},{"name":"terinjokes","email":"terinjokes@gmail.com"},{"name":"thlorenz","email":"thlorenz@gmx.de"},{"name":"dominictarr","email":"dominic.tarr@gmail.com"},{"name":"domenic","email":"domenic@domenicdenicola.com"},{"name":"mafintosh","email":"mathiasbuus@gmail.com"},{"name":"maxogden","email":"max@maxogden.com"},{"name":"substack","email":"mail@substack.net"}],"version":"9.0.3","license":{"name":"MIT","url":null},"lastPublishedAt":"2015-02-21T09:55:53.038Z","collaborators":{"maxogden":{"name":"maxogden","email":"max@maxogden.com","resource":{"github":"maxogden","twitter":"","freenode":"https://github.com/maxogden/messages","fullname":"Max Ogden","homepage":"https://github.com/maxogden/messages","appdotnet":"https://github.com/maxogden/messages"},"permissions":"write"},"domenic":{"name":"domenic","email":"d@domenic.me","resource":{"github":"domenic","twitter":"","freenode":"Domenic","fullname":"Domenic Denicola","homepage":"https://domenic.me/","appdotnet":""},"permissions":"write"},"dominictarr":{"name":"dominictarr","email":"dominic.tarr@gmail.com","resource":{"github":"dominictarr","twitter":"","freenode":"dominictarr","fullname":"Dominic Tarr","homepage":"dominictarr.com","appdotnet":""},"permissions":"write"},"mafintosh":{"name":"mafintosh","email":"mathiasbuus@gmail.com","resource":{"github":"mafintosh","twitter":"","freenode":"mafintosh","fullname":"Mathias Buus","homepage":"","appdotnet":""},"permissions":"write"},"substack":{"name":"substack","email":"mail@substack.net","resource":{"github":"substack","twitter":"","freenode":"substack","fullname":"James Halliday","homepage":"http://substack.net","appdotnet":""},"permissions":"write"}}}